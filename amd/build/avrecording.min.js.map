{"version":3,"file":"avrecording.min.js","sources":["../src/avrecording.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * JavaScript to the recording work.\n *\n * We would like to thank the creators of atto_recordrtc, whose\n * work originally inspired this.\n *\n * This script uses some third-party JavaScript and loading that within Moodle/ES6\n * requires some contortions. The main classes here are:\n *\n * * Recorder - represents one recording widget. This works in a way that is\n *   not particularly specific to this question type.\n * * RecordRtcQuestion - represents one question, which may contain several recorders.\n *   It deals with the interaction between the recorders and the question.\n *\n * @module    qtype_recordrtc/avrecording\n * @copyright 2019 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Log from 'core/log';\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\n\n/**\n * Verify that the question type can work. If not, show a warning.\n *\n * @return {string} 'ok' if it looks OK, else 'nowebrtc' or 'nothttps' if there is a problem.\n */\nfunction checkCanWork() {\n    // Check APIs are known.\n    if (!(navigator.mediaDevices && window.MediaRecorder)) {\n        return 'nowebrtc';\n    }\n\n    // Check protocol (localhost).\n    if (location.protocol === 'https:' ||\n            location.host === 'localhost' || location.host === '127.0.0.1') {\n        return 'ok';\n    } else {\n        return 'nothttps';\n    }\n}\n\n/**\n * Object for actually doing the recording.\n *\n * The recorder can be in one of several states, which is stored in a data-state\n * attribute on the outer span (widget). The states are:\n *\n *  - new:       there is no recording yet. Button shows 'Start recording' (audio) or 'Start camera' (video).\n *  - starting:  (video only) camera has started, but we are not recording yet. Button show 'Start recording'.\n *  - recording: Media is being recorded. Pause button visible if allowed. Main button shows 'Stop'. Countdown displayed.\n *  - paused:    If pause was pressed. Media recording paused, but resumable. Pause button changed to say 'resume'.\n *  - saving:    Media being uploaded. Progress indication shown. Pause button hidden if was visible.\n *  - recorded:  Recording and upload complete. The button then shows 'Record again'.\n *\n * @param {HTMLElement} widget the DOM node that is the top level of the whole recorder.\n * @param {(AudioSettings|VideoSettings)} mediaSettings information about the media type.\n * @param {Object} owner the object we are doing the recording for. Must provide three callback functions\n *                       showAlert notifyRecordingComplete notifyButtonStatesChanged.\n * @param {Object} uploadInfo object with fields uploadRepositoryId, draftItemId, contextId and maxUploadSize.\n * @constructor\n */\nfunction Recorder(widget, mediaSettings, owner, uploadInfo) {\n    /**\n     * @type {Recorder} reference to this recorder, for use in event handlers.\n     */\n    const recorder = this;\n\n    /**\n     * @type {MediaStream} during recording, the stream of incoming media.\n     */\n    let mediaStream = null;\n\n    /**\n     * @type {MediaRecorder} the recorder that is capturing stream.\n     */\n    let mediaRecorder = null;\n\n    /**\n     * @type {Blob[]} the chunks of data that have been captured so far during the current recording.\n     */\n    let chunks = [];\n\n    /**\n     * @type {number} number of bytes recorded so far, so we can auto-stop\n     * before hitting Moodle's file-size limit.\n     */\n    let bytesRecordedSoFar = 0;\n\n    /**\n     * @type {number} when paused, the time left in milliseconds, so we can auto-stop at the time limit.\n     */\n    let timeRemaining = 0;\n\n    /**\n     * @type {number} while recording, the time we reach the time-limit, so we can auto-stop then.\n     * This is milliseconds since Unix epoch, so comparable with Date.now().\n     */\n    let stopTime = 0;\n\n    /**\n     * @type {number} intervalID returned by setInterval() while the timer is running.\n     */\n    let countdownTicker = 0;\n\n    /**\n     * @type {object} The progress bar animation object.\n     */\n    let progressBarAnimation;\n\n    const button = widget.querySelector('button.qtype_recordrtc-main-button');\n    const pauseButton = widget.querySelector('.qtype_recordrtc-pause-button button');\n    const controlRow = widget.querySelector('.qtype_recordrtc-control-row');\n    const mediaElement = widget.querySelector('.qtype_recordrtc-media-player ' +\n        (mediaSettings.name === 'screen' ? 'video' : mediaSettings.name));\n    const noMediaPlaceholder = widget.querySelector('.qtype_recordrtc-no-recording-placeholder');\n    const timeDisplay = widget.querySelector('.qtype_recordrtc-time-left');\n    const progressBar = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front');\n    const backTimeEnd = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-back span.timer-end');\n    const backtimeStart = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-back span.timer-start');\n    const frontTimeEnd = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front span.timer-end');\n    const fronttimeStart = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front span.timer-start');\n\n    widget.addEventListener('click', handleButtonClick);\n    this.uploadMediaToServer = uploadMediaToServer; // Make this method available.\n\n    /**\n     * Handles clicks on the start/stop and pause buttons.\n     *\n     * @param {Event} e\n     */\n    function handleButtonClick(e) {\n        const clickedButton = e.target.closest('button');\n        if (!clickedButton || clickedButton.classList.contains('close')) {\n            return; // It's not actually a button click or clicking a button to close the alert message.\n        }\n        e.preventDefault();\n        switch (widget.dataset.state) {\n            case 'new':\n            case 'recorded':\n                startRecording();\n                break;\n            case 'starting':\n                startSaving();\n                break;\n            case 'recording':\n                if (clickedButton === pauseButton) {\n                    pause();\n                } else {\n                    stopRecording();\n                }\n                break;\n            case 'paused':\n                if (clickedButton === pauseButton) {\n                    resume();\n                } else {\n                    stopRecording();\n                }\n                break;\n        }\n    }\n\n    /**\n     * Start recording (because the button was clicked).\n     */\n    function startRecording() {\n\n        // Hide error message.\n        const errorMessage = widget.querySelector('.alert.alert-block');\n        if (errorMessage) {\n            errorMessage.remove();\n        }\n\n        const videoElement = widget.querySelector('video');\n        if (videoElement && videoElement.classList.contains('d-none')) {\n            videoElement.classList.remove('d-none');\n        }\n\n        // Reset timer label.\n        setLabelForTimer(0, parseInt(widget.dataset.maxRecordingDuration));\n\n        if (mediaSettings.name === 'audio') {\n            mediaElement.parentElement.classList.add('hide');\n            noMediaPlaceholder.classList.add('hide');\n            timeDisplay.classList.remove('hide');\n\n        } else {\n            mediaElement.parentElement.classList.remove('hide');\n            noMediaPlaceholder.classList.add('hide');\n        }\n        pauseButton?.parentElement.classList.remove('hide');\n\n        // Change look of recording button.\n        button.classList.remove('btn-outline-danger');\n        button.classList.add('btn-danger');\n\n        // Disable other question buttons when current widget stared recording.\n        disableAllButtons();\n\n        // Empty the array containing the previously recorded chunks.\n        chunks = [];\n        bytesRecordedSoFar = 0;\n\n        // Normal case.\n        if (mediaSettings.name !== 'screen') {\n            navigator.mediaDevices.getUserMedia(mediaSettings.mediaConstraints)\n                .then(handleCaptureStarting)\n                .catch(handleCaptureFailed);\n            return;\n        }\n\n        // Screen recording requires both audio and the screen, and we need to get them both together.\n        const audioPromise = navigator.mediaDevices.getUserMedia({audio: true});\n        const screenPromise = navigator.mediaDevices.getDisplayMedia(mediaSettings.mediaConstraints);\n\n        // If the audioPromise is \"rejected\" (indicating that the user does not want to share their voice),\n        // we will proceed to record their screen without audio.\n        // Therefore, we will use Promise.allSettled instead of Promise.all.\n        Promise.allSettled([audioPromise, screenPromise]).then(combineAudioAndScreenRecording);\n    }\n\n    /**\n     * For starting screen recording, once we have both audio and video, combine them.\n     *\n     * @param {Object[]} results from the above Promise.allSettled call.\n     */\n    function combineAudioAndScreenRecording(results) {\n        const [audioData, screenData] = results;\n\n        if (screenData.status !== 'fulfilled') {\n            // If the user does not grant screen permission show warning popup.\n            handleCaptureFailed(screenData.reason);\n            return;\n        }\n        const screenStream = screenData.value;\n\n        // Prepare to handle if the user clicks the browser's \"Stop Sharing Screen\" button.\n        screenStream.getVideoTracks()[0].addEventListener('ended', handleStopSharing);\n\n        // Handle microphone.\n        if (audioData.status !== 'fulfilled') {\n            // We could not get audio. In this case, we just continue without audio,\n            // but put the message in the console in case we need to debug.\n            Log.debug(\"Could not capture audio. Continuing without. Reason: \" + audioData.reason);\n            handleCaptureStarting(screenStream);\n            return;\n        }\n        const audioStream = audioData.value;\n\n        // Merge the video track from the media stream with the audio track from the microphone stream\n        // and stop any unnecessary tracks to ensure that the recorded video has microphone sound.\n        const composedStream = new MediaStream();\n        screenStream.getTracks().forEach(function(track) {\n            if (track.kind === 'video') {\n                composedStream.addTrack(track);\n            } else {\n                track.stop();\n            }\n        });\n        audioStream.getAudioTracks().forEach(function(micTrack) {\n            composedStream.addTrack(micTrack);\n        });\n\n        handleCaptureStarting(composedStream);\n    }\n\n    /**\n     * Callback once getUserMedia has permission from the user to access the recording devices.\n     *\n     * @param {MediaStream} stream the stream to record.\n     */\n    function handleCaptureStarting(stream) {\n        mediaStream = stream;\n\n        // Setup the UI for during recording.\n        mediaElement.srcObject = stream;\n        mediaElement.muted = true;\n        switch (mediaSettings.name) {\n            case 'audio':\n                startSaving();\n                button.disabled = false;\n                button.focus();\n                break;\n\n            case 'video':\n                mediaElement.play();\n                mediaElement.controls = false;\n\n                widget.dataset.state = 'starting';\n                setButtonLabel('startrecording');\n                button.disabled = false;\n                button.focus();\n                widget.querySelector('.qtype_recordrtc-stop-button').disabled = false;\n                break;\n\n            case 'screen':\n                mediaElement.play();\n                mediaElement.controls = false;\n                startSaving();\n                widget.querySelector('.qtype_recordrtc-stop-button').disabled = false;\n                break;\n        }\n\n        // Make button clickable again, to allow starting/stopping recording.\n        if (pauseButton) {\n            pauseButton.disabled = false;\n        }\n    }\n\n    /**\n     * For recording types which show the media during recording,\n     * this starts the loop-back display, but does not start recording it yet.\n     */\n    function startSaving() {\n        // Initialize MediaRecorder events and start recording.\n        mediaRecorder = new MediaRecorder(mediaStream, getRecordingOptions());\n\n        mediaRecorder.ondataavailable = handleDataAvailable;\n        mediaRecorder.onpause = handleDataAvailable;\n        mediaRecorder.onstop = handleRecordingHasStopped;\n        mediaRecorder.start(1000); // Capture in one-second chunks. Firefox requires that.\n\n        widget.dataset.state = 'recording';\n        // Initialize and start the animation.\n        initProgressBarAnimation();\n        progressBarAnimation.play();\n        setButtonLabel('stoprecording');\n        startCountdownTimer();\n        if (mediaSettings.name === 'video' || mediaSettings.name === 'screen') {\n            button.parentElement.classList.add('hide');\n            controlRow.classList.remove('hide');\n            controlRow.classList.add('d-flex');\n            timeDisplay.classList.remove('hide');\n        }\n    }\n\n    /**\n     * Callback that is called by the user clicking Stop screen sharing on the browser.\n     */\n    function handleStopSharing() {\n        if (widget.dataset.state === 'starting') {\n            widget.dataset.state = 'new';\n            mediaElement.parentElement.classList.add('hide');\n            noMediaPlaceholder.classList.remove('hide');\n            setButtonLabel('startsharescreen');\n            button.blur();\n        } else {\n            const controlEl = widget.querySelector('.qtype_recordrtc-control-row');\n            if (!controlEl.classList.contains('hide')) {\n                controlEl.querySelector('.qtype_recordrtc-stop-button').click();\n            }\n        }\n        enableAllButtons();\n    }\n\n    /**\n     * Function to initialise progress bar animation.\n     */\n    function initProgressBarAnimation() {\n        progressBarAnimation = progressBar.animate([\n            {clipPath: 'inset(0 0 0 0%)'},\n            {clipPath: 'inset(0 0 0 100%)'},\n        ], {\n            duration: widget.dataset.maxRecordingDuration * 1000,\n            fill: 'forwards',\n            delay: 0,\n        });\n    }\n\n    /**\n     * Callback that is called by the media system for each Chunk of data.\n     *\n     * @param {BlobEvent} event\n     */\n    function handleDataAvailable(event) {\n        if (!event.data) {\n            return; // It seems this can happen around pausing.\n        }\n\n        // Check there is space to store the next chunk, and if not stop.\n        bytesRecordedSoFar += event.data.size;\n        if (uploadInfo.maxUploadSize >= 0 && bytesRecordedSoFar >= uploadInfo.maxUploadSize) {\n\n            // Extra check to avoid alerting twice.\n            if (!localStorage.getItem('alerted')) {\n                localStorage.setItem('alerted', 'true');\n                stopRecording();\n                owner.showAlert('nearingmaxsize');\n\n            } else {\n                localStorage.removeItem('alerted');\n            }\n        }\n\n        // Store the next chunk of data.\n        chunks.push(event.data);\n\n        // Notify form-change-checker that there is now unsaved data.\n        // But, don't do this in question preview where it is just annoying.\n        if (typeof M.core_formchangechecker !== 'undefined' &&\n            !window.location.pathname.endsWith('/question/preview.php')) {\n            M.core_formchangechecker.set_form_changed();\n        }\n    }\n\n    /**\n     * Pause recording.\n     */\n    function pause() {\n        // Stop the count-down timer.\n        stopCountdownTimer();\n        setPauseButtonLabel('resume');\n        mediaRecorder.pause();\n        widget.dataset.state = 'paused';\n        // Pause animate.\n        toggleProgressbarState();\n    }\n\n    /**\n     * Continue recording.\n     */\n    function resume() {\n        // Stop the count-down timer.\n        resumeCountdownTimer();\n        widget.dataset.state = 'recording';\n        setPauseButtonLabel('pause');\n        mediaRecorder.resume();\n        // Resume animate.\n        toggleProgressbarState();\n    }\n\n    /**\n     * Start recording (because the button was clicked or because we have reached a limit).\n     */\n    function stopRecording() {\n        // Disable the button while things change.\n        button.disabled = true;\n\n        // Stop the count-down timer.\n        stopCountdownTimer();\n\n        // Update the button.\n        button.classList.remove('btn-danger');\n        button.classList.add('btn-outline-danger');\n        if (pauseButton) {\n            setPauseButtonLabel('pause');\n            pauseButton.parentElement.classList.add('hide');\n        }\n\n        // Stop animate.\n        progressBarAnimation.cancel();\n\n        // Ask the recording to stop.\n        mediaRecorder.stop();\n\n        // Also stop each individual MediaTrack.\n        const tracks = mediaStream.getTracks();\n        for (let i = 0; i < tracks.length; i++) {\n            tracks[i].stop();\n        }\n    }\n\n    /**\n     * Callback that is called by the media system once recording has finished.\n     */\n    function handleRecordingHasStopped() {\n        if (widget.dataset.state === 'new') {\n            // This can happens if an error occurs when recording is starting. Do nothing.\n            return;\n        }\n\n        // Set source of the media player.\n        const blob = new Blob(chunks, {type: mediaRecorder.mimeType});\n        mediaElement.srcObject = null;\n        mediaElement.src = URL.createObjectURL(blob);\n\n        // Show audio player with controls enabled, and unmute.\n        mediaElement.muted = false;\n        mediaElement.controls = true;\n        mediaElement.parentElement.classList.remove('hide');\n        noMediaPlaceholder.classList.add('hide');\n        mediaElement.focus();\n\n        if (mediaSettings.name === 'audio') {\n            timeDisplay.classList.add('hide');\n\n        } else {\n            button.parentElement.classList.remove('hide');\n            controlRow.classList.add('hide');\n            controlRow.classList.remove('d-flex');\n        }\n\n        // Ensure the button while things change.\n        button.disabled = true;\n        button.classList.remove('btn-danger');\n        button.classList.add('btn-outline-danger');\n        widget.dataset.state = 'recorded';\n\n        if (chunks.length > 0) {\n            owner.notifyRecordingComplete(recorder);\n        }\n    }\n\n    /**\n     * Function that handles errors from the recorder.\n     *\n     * @param {DOMException} error\n     */\n    function handleCaptureFailed(error) {\n        Log.debug('Audio/video/screen question: error received');\n        Log.debug(error);\n\n        setPlaceholderMessage('recordingfailed');\n        setButtonLabel('recordagainx');\n        button.classList.remove('btn-danger');\n        button.classList.add('btn-outline-danger');\n        widget.dataset.state = 'new';\n        // Hide time display.\n        timeDisplay.classList.add('hide');\n\n        if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n            mediaRecorder.stop();\n        }\n\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\n        const stringName = 'gum' + error.name.replace('Error', '').toLowerCase();\n\n        owner.showAlert(stringName);\n        enableAllButtons();\n    }\n\n    /**\n     * Start the countdown timer.\n     */\n    function startCountdownTimer() {\n        timeRemaining = widget.dataset.maxRecordingDuration * 1000;\n        resumeCountdownTimer();\n        updateTimerDisplay();\n    }\n\n    /**\n     * Stop the countdown timer.\n     */\n    function stopCountdownTimer() {\n        timeRemaining = stopTime - Date.now();\n        if (countdownTicker !== 0) {\n            clearInterval(countdownTicker);\n            countdownTicker = 0;\n        }\n    }\n\n    /**\n     * Start or resume the countdown timer.\n     */\n    function resumeCountdownTimer() {\n        stopTime = Date.now() + timeRemaining;\n        if (countdownTicker === 0) {\n            countdownTicker = setInterval(updateTimerDisplay, 100);\n        }\n    }\n\n    /**\n     * Update the countdown timer, and stop recording if we have reached 0.\n     */\n    function updateTimerDisplay() {\n        const millisecondsRemaining = stopTime - Date.now();\n        const secondsRemaining = Math.round(millisecondsRemaining / 1000);\n        const secondsStart = widget.dataset.maxRecordingDuration - secondsRemaining;\n        // Set time label for elements.\n        setLabelForTimer(secondsStart, secondsRemaining);\n        if (millisecondsRemaining <= 0) {\n            stopRecording();\n        }\n    }\n\n    /**\n     * Get time label for timer.\n     *\n     * @param {number} seconds The time in seconds.\n     * @return {string} The label for timer. e.g. '00:00' or '10:00'.\n     */\n    function getTimeLabelForTimer(seconds) {\n        const secs = seconds % 60;\n        const mins = Math.round((seconds - secs) / 60);\n\n        return M.util.get_string('timedisplay', 'qtype_recordrtc',\n            {mins: pad(mins), secs: pad(secs)});\n    }\n\n    /**\n     * Set time label for timer.\n     * We need to update the labels for both the timer back(whose background color is white) and\n     * timer front (with blue background) to create a text effect that contrasts with the background color.\n     *\n     * @param {Number} secondsStart The second start. e.g: With duration 1 minute\n     * secondsStart will start from 0 and increase up to 60.\n     * @param {Number} secondsRemaining The second remaining. e.g: With duration 1 minute\n     * secondsRemaining will decrease from 60 to 0.\n     */\n    function setLabelForTimer(secondsStart, secondsRemaining) {\n        // Set time label for timer back.\n        backTimeEnd.innerText = getTimeLabelForTimer(secondsRemaining);\n        backtimeStart.innerText = getTimeLabelForTimer(secondsStart);\n        // Set time label for timer front.\n        frontTimeEnd.innerText = getTimeLabelForTimer(secondsRemaining);\n        fronttimeStart.innerText = getTimeLabelForTimer(secondsStart);\n    }\n\n    /**\n     * Zero-pad a string to be at least two characters long.\n     *\n     * @param {number} val e.g. 1 or 10\n     * @return {string} e.g. '01' or '10'.\n     */\n    function pad(val) {\n        const valString = val + '';\n\n        if (valString.length < 2) {\n            return '0' + valString;\n        } else {\n            return '' + valString;\n        }\n    }\n\n    /**\n     * Trigger the upload of the recorded media back to Moodle.\n     */\n    async function uploadMediaToServer() {\n        setButtonLabel('uploadpreparing');\n\n        if (widget.dataset.convertToMp3) {\n            const mp3DataBlob = await convertOggToMp3(mediaElement.src);\n            mediaElement.src = URL.createObjectURL(mp3DataBlob);\n            uploadBlobToRepository(mp3DataBlob, widget.dataset.recordingFilename.replace(/\\.ogg$/, '.mp3'));\n        } else {\n            // First we need to get the media data from the media element.\n            const oggDataBlob = await fetchOggData(mediaElement.src, 'blob');\n            uploadBlobToRepository(oggDataBlob, widget.dataset.recordingFilename);\n        }\n    }\n\n    /**\n     * Convert audio data to MP3.\n     *\n     * @param {string} sourceUrl URL from which to fetch the Ogg audio file to convert.\n     * @returns {Promise<Blob>}\n     */\n    async function convertOggToMp3(sourceUrl) {\n        const lamejs = await getLameJs();\n        const oggData = await fetchOggData(sourceUrl, 'arraybuffer');\n        const audioBuffer = await (new AudioContext()).decodeAudioData(oggData);\n        const [left, right] = getRawAudioDataFromBuffer(audioBuffer);\n        return await createMp3(lamejs, audioBuffer.numberOfChannels, audioBuffer.sampleRate, left, right);\n    }\n\n    /**\n     * Helper to wrap loading the lamejs library.\n     *\n     * @returns {Promise<*>} access to the lamejs library.\n     */\n    async function getLameJs() {\n        return await import(M.cfg.wwwroot + '/question/type/recordrtc/js/lamejs@1.2.1a-7-g582bbba/lame.min.js');\n    }\n\n    /**\n     * Load Ogg data from a URL and return as an ArrayBuffer or a Blob.\n     *\n     * @param {string} sourceUrl URL from which to fetch the Ogg audio data.\n     * @param {XMLHttpRequestResponseType} responseType 'arraybuffer' or 'blob'.\n     * @returns {Promise<ArrayBuffer|Blob>} the audio data in the requested structure.\n     */\n    function fetchOggData(sourceUrl, responseType) {\n        return new Promise((resolve) => {\n            const fetchRequest = new XMLHttpRequest();\n            fetchRequest.open('GET', sourceUrl);\n            fetchRequest.responseType = responseType;\n            fetchRequest.addEventListener('load', () => {\n                resolve(fetchRequest.response);\n            });\n            fetchRequest.send();\n        });\n    }\n\n    /**\n     * Extract the raw sample data from an AudioBuffer.\n     *\n     * @param {AudioBuffer} audioIn an audio buffer, e.g. from a call to decodeAudioData.\n     * @returns {Int16Array[]} for each audio channel, a Int16Array of the samples.\n     */\n    function getRawAudioDataFromBuffer(audioIn) {\n        const channelData = [];\n\n        for (let channel = 0; channel < audioIn.numberOfChannels; channel++) {\n            const rawChannelData = audioIn.getChannelData(channel);\n            channelData[channel] = new Int16Array(audioIn.length);\n            for (let i = 0; i < audioIn.length; i++) {\n                // This is not the normal code given for this conversion (which can be\n                // found in git history) but this is 10x faster, and surely good enough.\n                channelData[channel][i] = rawChannelData[i] * 0x7FFF;\n            }\n        }\n\n        return channelData;\n    }\n\n    /**\n     * Convert some audio data to MP3.\n     *\n     * @param {*} lamejs lamejs library from getLameJs().\n     * @param {int} channels number of audio channels (1 or 2 supported).\n     * @param {int} sampleRate sample rate of the audio to encode.\n     * @param {Int16Array} left audio data for the left or only channel.\n     * @param {Int16Array|null} right audio data for the right channel, if any.\n     * @returns {Blob} representing an MP3 file.\n     */\n    async function createMp3(lamejs, channels, sampleRate, left, right = null) {\n        const buffer = [];\n        const mp3enc = new lamejs.Mp3Encoder(channels, sampleRate, mediaSettings.bitRate / 1000);\n        let remaining = left.length;\n        const samplesPerFrame = 1152;\n        let mp3buf;\n\n        await setPreparingPercent(0, left.length);\n        for (let i = 0; remaining >= samplesPerFrame; i += samplesPerFrame) {\n            if (channels === 1) {\n                const mono = left.subarray(i, i + samplesPerFrame);\n                mp3buf = mp3enc.encodeBuffer(mono);\n            } else {\n                const leftChunk = left.subarray(i, i + samplesPerFrame);\n                const rightChunk = right.subarray(i, i + samplesPerFrame);\n                mp3buf = mp3enc.encodeBuffer(leftChunk, rightChunk);\n            }\n            if (mp3buf.length > 0) {\n                buffer.push(mp3buf);\n            }\n            remaining -= samplesPerFrame;\n            if (i % (10 * samplesPerFrame) === 0) {\n                await setPreparingPercent(i, left.length);\n            }\n        }\n        const d = mp3enc.flush();\n        if (d.length > 0) {\n            buffer.push(new Int8Array(d));\n        }\n        await setPreparingPercent(left.length, left.length);\n\n        return new Blob(buffer, {type: \"audio/mp3\"});\n    }\n\n    /**\n     * Set the label on the upload button to a progress message including a percentage.\n     *\n     * @param {number} current number done so far.\n     * @param {number} total number to do in total.\n     */\n    async function setPreparingPercent(current, total) {\n        setButtonLabel('uploadpreparingpercent', Math.round(100 * current / total));\n        // Next like is a hack to ensure the screen acutally updates.\n        await new Promise(resolve => requestAnimationFrame(resolve));\n    }\n\n    /**\n     * Upload the audio file to the Moodle draft file repository.\n     *\n     * @param {Blob} blob data to upload.\n     * @param {string} recordingFilename the filename to use for the uplaod.\n     */\n    function uploadBlobToRepository(blob, recordingFilename) {\n\n        // Create FormData to send to PHP filepicker-upload script.\n        const formData = new FormData();\n        formData.append('repo_upload_file', blob, recordingFilename);\n        formData.append('sesskey', M.cfg.sesskey);\n        formData.append('repo_id', uploadInfo.uploadRepositoryId);\n        formData.append('itemid', uploadInfo.draftItemId);\n        formData.append('savepath', '/');\n        formData.append('ctx_id', uploadInfo.contextId);\n        formData.append('overwrite', '1');\n\n        const uploadRequest = new XMLHttpRequest();\n        uploadRequest.addEventListener('readystatechange', handleUploadReadyStateChanged);\n        uploadRequest.upload.addEventListener('progress', handleUploadProgress);\n        uploadRequest.addEventListener('error', handleUploadError);\n        uploadRequest.addEventListener('abort', handleUploadAbort);\n        uploadRequest.open('POST', M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n        uploadRequest.send(formData);\n    }\n\n    /**\n     * Callback for when the upload completes.\n     * @param {ProgressEvent} e\n     */\n    function handleUploadReadyStateChanged(e) {\n        const uploadRequest = e.target;\n        if (uploadRequest.readyState !== 4) {\n            return; // Not finished yet. We will get more of these events when it is.\n        }\n\n        const response = JSON.parse(uploadRequest.responseText);\n        if (response.errorcode) {\n            handleUploadError(); // Moodle sends back errors with a 200 status code for some reason!\n        }\n\n        if (uploadRequest.status === 200) {\n            // When request finished and successful.\n            setButtonLabel('recordagainx');\n            button.classList.remove('btn-outline-danger');\n            enableAllButtons();\n        } else if (uploadRequest.status === 404) {\n            setPlaceholderMessage('uploadfailed404');\n            enableAllButtons();\n        }\n    }\n\n    /**\n     * Callback for updating the upload progress.\n     * @param {ProgressEvent} e\n     */\n    function handleUploadProgress(e) {\n        setButtonLabel('uploadprogress', Math.round(e.loaded / e.total * 100) + '%');\n    }\n\n    /**\n     * Callback for when the upload fails with an error.\n     */\n    function handleUploadError() {\n        setPlaceholderMessage('uploadfailed');\n        enableAllButtons();\n    }\n\n    /**\n     * Callback for when the upload fails with an error.\n     */\n    function handleUploadAbort() {\n        setPlaceholderMessage('uploadaborted');\n        enableAllButtons();\n    }\n\n    /**\n     * Change the label on the start/stop button.\n     *\n     * @param {string} langString\n     * @param {string|null} [a] optional variable to populate placeholder with\n     */\n    function setButtonLabel(langString, a) {\n        if (a === undefined) {\n            // Seemingly unnecessary space inside the span is needed for screen-readers, and it must be a non-breaking space.\n            a = '<span class=\"sr-only\">&nbsp;' + widget.dataset.widgetName + '</span>';\n        }\n        button.innerHTML = M.util.get_string(langString, 'qtype_recordrtc', a);\n    }\n\n    /**\n     * Change the label on the pause button.\n     *\n     * @param {string} langString\n     */\n    function setPauseButtonLabel(langString) {\n        pauseButton.innerText = M.util.get_string(langString, 'qtype_recordrtc');\n    }\n\n    /**\n     * Display a message in the upload progress area.\n     *\n     * @param {string} langString\n     */\n    function setPlaceholderMessage(langString) {\n        noMediaPlaceholder.textContent = M.util.get_string(langString, 'qtype_recordrtc');\n        mediaElement.parentElement.classList.add('hide');\n        noMediaPlaceholder.classList.remove('hide');\n    }\n\n    /**\n     * Select best options for the recording codec.\n     *\n     * @returns {Object}\n     */\n    function getRecordingOptions() {\n        const options = {};\n\n        // Get the relevant bit rates from settings.\n        if (mediaSettings.name === 'audio') {\n            options.audioBitsPerSecond = mediaSettings.bitRate;\n        } else if (mediaSettings.name === 'video' || mediaSettings.name === 'screen') {\n            options.videoBitsPerSecond = mediaSettings.bitRate;\n            options.videoWidth = mediaSettings.width;\n            options.videoHeight = mediaSettings.height;\n\n            // Go through our list of mimeTypes, and take the first one that will work.\n            for (let i = 0; i < mediaSettings.mimeTypes.length; i++) {\n                if (MediaRecorder.isTypeSupported(mediaSettings.mimeTypes[i])) {\n                    options.mimeType = mediaSettings.mimeTypes[i];\n                    break;\n                }\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * Enable all buttons in the question.\n     */\n    function enableAllButtons() {\n        disableOrEnableButtons(true);\n        owner.notifyButtonStatesChanged();\n    }\n\n    /**\n     * Disable all buttons in the question.\n     */\n    function disableAllButtons() {\n        disableOrEnableButtons(false);\n    }\n\n    /**\n     * Disables/enables other question buttons when current widget started recording/finished recording.\n     *\n     * @param {boolean} enabled true if the button should be enabled.\n     */\n    function disableOrEnableButtons(enabled = false) {\n        document.querySelectorAll('.que.recordrtc').forEach(record => {\n            record.querySelectorAll('button, input[type=submit], input[type=button]').forEach(button => {\n                button.disabled = !enabled;\n            });\n        });\n    }\n\n    /**\n     * Pause/resume the progressbar state.\n     */\n    function toggleProgressbarState() {\n        const animationState = progressBarAnimation.playState || 'running';\n        if (animationState === 'running') {\n            progressBarAnimation.pause();\n        } else {\n            progressBarAnimation.play();\n        }\n    }\n}\n\n/**\n * Object that controls the settings for recording audio.\n *\n * @param {string} bitRate desired audio bitrate.\n * @constructor\n */\nfunction AudioSettings(bitRate) {\n    this.name = 'audio';\n    this.bitRate = parseInt(bitRate, 10);\n    this.mediaConstraints = {\n        audio: true\n    };\n    this.mimeTypes = [\n        'audio/webm;codecs=opus',\n        'audio/ogg;codecs=opus'\n    ];\n}\n\n/**\n * Object that controls the settings for recording video.\n *\n * @param {string} bitRate desired video bitrate.\n * @param {string} width desired width.\n * @param {string} height desired height.\n * @constructor\n */\nfunction VideoSettings(bitRate, width, height) {\n    this.name = 'video';\n    this.bitRate = parseInt(bitRate, 10);\n    this.width = parseInt(width, 10);\n    this.height = parseInt(height, 10);\n    this.mediaConstraints = {\n        audio: true,\n        video: {\n            width: {ideal: this.width},\n            height: {ideal: this.height}\n        }\n    };\n    this.mimeTypes = [\n        'video/webm;codecs=vp9,opus',\n        'video/webm;codecs=h264,opus',\n        'video/webm;codecs=vp8,opus'\n    ];\n}\n\n/**\n * Object that controls the settings for recording screen.\n *\n * @param {string} bitRate desired screen bitrate.\n * @param {string} width desired width.\n * @param {string} height desired height.\n * @constructor\n */\nfunction ScreenSettings(bitRate, width, height) {\n    this.name = 'screen';\n    this.bitRate = parseInt(bitRate, 10);\n    this.width = parseInt(width, 10);\n    this.height = parseInt(height, 10);\n    this.mediaConstraints = {\n        audio: true,\n        systemAudio: 'exclude',\n        video: {\n            displaySurface: 'monitor',\n            frameRate: {ideal: 24},\n            // Currently, Safari does not support ideal constraints for width and height with screen sharing feature.\n            // It may be supported in version 16.4.\n            width: {max: this.width},\n            height: {max: this.height},\n        }\n    };\n\n    // We use vp8 as the default codec. If it is not supported, we will switch to another codec.\n    this.mimeTypes = [\n        'video/webm;codecs=vp8,opus',\n        'video/webm;codecs=vp9,opus',\n        'video/webm;codecs=h264,opus',\n    ];\n}\n\n/**\n * Represents one record audio or video question.\n *\n * @param {string} questionId id of the outer question div.\n * @param {Object} settings like audio bit rate.\n * @constructor\n */\nfunction RecordRtcQuestion(questionId, settings) {\n    const questionDiv = document.getElementById(questionId);\n\n    // Check if the RTC API can work here.\n    const result = checkCanWork();\n    if (result === 'nothttps') {\n        questionDiv.querySelector('.https-warning').classList.remove('hide');\n        return;\n    } else if (result === 'nowebrtc') {\n        questionDiv.querySelector('.no-webrtc-warning').classList.remove('hide');\n        return;\n    }\n\n    addPlaybackErrorHandlingToVideoElements();\n\n    // Make the callback functions available.\n    this.showAlert = showAlert;\n    this.notifyRecordingComplete = notifyRecordingComplete;\n    this.notifyButtonStatesChanged = setSubmitButtonState;\n    const thisQuestion = this;\n\n    // We may have more than one widget in a question.\n    questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget, .qtype_recordrtc-screen-widget')\n        .forEach(function(widget) {\n            // Get the appropriate options.\n            let typeInfo;\n            switch (widget.dataset.mediaType) {\n                case 'audio':\n                    typeInfo = new AudioSettings(settings.audioBitRate);\n                    break;\n                case 'screen':\n                    typeInfo = new ScreenSettings(settings.screenBitRate, settings.screenWidth, settings.screenHeight);\n                    break;\n                default:\n                    typeInfo = new VideoSettings(settings.videoBitRate, settings.videoWidth, settings.videoHeight);\n                    break;\n            }\n\n            // Create the recorder.\n            new Recorder(widget, typeInfo, thisQuestion, settings);\n            return 'Not used';\n        });\n    setSubmitButtonState();\n\n    /**\n     * Setup video playback, catching errors if the device can't playback this format.\n     */\n    function addPlaybackErrorHandlingToVideoElements() {\n        // Retrieve all video and screen widgets.\n        const mediaElements = questionDiv.querySelectorAll('.qtype_recordrtc-screen-widget, .qtype_recordrtc-video-widget');\n\n        // We only need to do some if any have a recording.\n        if (!Array.prototype.some.call(mediaElements, media => (media.querySelector('video:not([data-source=\"\"])') !== null))) {\n            return;\n        }\n\n        // Load the template once, before we use the hTML.\n        Templates.renderForPromise('core/notification_error', {\n                closebutton: true,\n                announce: true,\n                message: questionDiv.querySelector(\n                        '.qtype_recordrtc-video-widget, .qtype_recordrtc-screen-widget').dataset.errorMessage,\n            }\n        ).then(({html}) => {\n            // Loop through the mediaElements list.\n            mediaElements.forEach(widget => {\n                const videoElement = widget.querySelector('video');\n\n                // Just handle the case when the video has been recorded.\n                if (videoElement.dataset.source === '') {\n                    return;\n                }\n\n                const buttonElement =  videoElement.querySelector('button.qtype_recordrtc-main-button[disabled]');\n\n                const sourceElement = document.createElement('source');\n                sourceElement.addEventListener('error', () => {\n                    // Append error template into element.\n                    videoElement.after(html);\n                    if (buttonElement) {\n                        buttonElement.disabled = false;\n                    }\n                });\n\n                videoElement.addEventListener('loadeddata', () => {\n                    // Show video element.\n                    videoElement.classList.remove('d-none');\n                    if (buttonElement) {\n                        buttonElement.disabled = false;\n                    }\n                });\n\n                sourceElement.setAttribute('src', videoElement.dataset.source);\n                videoElement.appendChild(sourceElement);\n            });\n        }).catch((error) => {\n            Log.debug(\"Could not load error template\");\n            Log.debug(error);\n        });\n    }\n\n    /**\n     * Set the state of the question's submit button.\n     *\n     * If any recorder does not yet have a recording, then disable the button.\n     * Otherwise, enable it.\n     */\n    function setSubmitButtonState() {\n        let anyRecorded = false;\n        questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget, .qtype_recordrtc-screen-widget')\n            .forEach(function(widget) {\n                if (widget.dataset.state === 'recorded') {\n                    anyRecorded = true;\n                }\n            });\n        const submitButton = questionDiv.querySelector('input.submit[type=submit]');\n        if (submitButton) {\n            submitButton.disabled = !anyRecorded;\n        }\n    }\n\n    /**\n     * Show a modal alert.\n     *\n     * @param {string} subject Subject is the content of the alert (which error the alert is for).\n     * @return {Promise}\n     */\n    function showAlert(subject) {\n        return ModalFactory.create({\n            type: ModalFactory.types.ALERT,\n            title: M.util.get_string(subject + '_title', 'qtype_recordrtc'),\n            body: M.util.get_string(subject, 'qtype_recordrtc'),\n        }).then(function(modal) {\n            modal.show();\n            return modal;\n        });\n    }\n\n    /**\n     * Callback called when the recording is completed.\n     *\n     * @param {Recorder} recorder the recorder.\n     */\n    function notifyRecordingComplete(recorder) {\n        recorder.uploadMediaToServer();\n    }\n}\n\n/**\n * Initialise a record audio or video question.\n *\n * @param {string} questionId id of the outer question div.\n * @param {Object} settings like audio bit rate.\n */\nfunction init(questionId, settings) {\n    M.util.js_pending('init-' + questionId);\n    new RecordRtcQuestion(questionId, settings);\n    M.util.js_complete('init-' + questionId);\n}\n\nexport {\n    init\n};\n"],"names":["questionId","settings","M","util","js_pending","RecordRtcQuestion","js_complete","Recorder","widget","mediaSettings","owner","uploadInfo","recorder","this","progressBarAnimation","mediaStream","mediaRecorder","chunks","bytesRecordedSoFar","timeRemaining","stopTime","countdownTicker","button","querySelector","pauseButton","controlRow","mediaElement","name","noMediaPlaceholder","timeDisplay","progressBar","backTimeEnd","backtimeStart","frontTimeEnd","fronttimeStart","combineAudioAndScreenRecording","results","audioData","screenData","status","handleCaptureFailed","reason","screenStream","value","getVideoTracks","addEventListener","handleStopSharing","debug","handleCaptureStarting","audioStream","composedStream","MediaStream","getTracks","forEach","track","kind","addTrack","stop","getAudioTracks","micTrack","stream","srcObject","muted","startSaving","disabled","focus","play","controls","dataset","state","setButtonLabel","MediaRecorder","options","audioBitsPerSecond","bitRate","videoBitsPerSecond","videoWidth","width","videoHeight","height","i","mimeTypes","length","isTypeSupported","mimeType","getRecordingOptions","ondataavailable","handleDataAvailable","onpause","onstop","handleRecordingHasStopped","start","animate","clipPath","duration","maxRecordingDuration","fill","delay","resumeCountdownTimer","updateTimerDisplay","parentElement","classList","add","remove","blur","controlEl","contains","click","enableAllButtons","event","data","size","maxUploadSize","localStorage","getItem","removeItem","setItem","stopRecording","showAlert","push","core_formchangechecker","window","location","pathname","endsWith","set_form_changed","stopCountdownTimer","setPauseButtonLabel","cancel","tracks","blob","Blob","type","src","URL","createObjectURL","notifyRecordingComplete","error","setPlaceholderMessage","stringName","replace","toLowerCase","Date","now","clearInterval","setInterval","millisecondsRemaining","secondsRemaining","Math","round","setLabelForTimer","getTimeLabelForTimer","seconds","secs","mins","get_string","pad","secondsStart","innerText","val","valString","fetchOggData","sourceUrl","responseType","Promise","resolve","fetchRequest","XMLHttpRequest","open","response","send","setPreparingPercent","current","total","requestAnimationFrame","uploadBlobToRepository","recordingFilename","formData","FormData","append","cfg","sesskey","uploadRepositoryId","draftItemId","contextId","uploadRequest","handleUploadReadyStateChanged","upload","handleUploadProgress","handleUploadError","handleUploadAbort","wwwroot","e","target","readyState","JSON","parse","responseText","errorcode","loaded","langString","a","undefined","widgetName","innerHTML","textContent","disableOrEnableButtons","notifyButtonStatesChanged","enabled","document","querySelectorAll","record","toggleProgressbarState","playState","pause","clickedButton","closest","preventDefault","errorMessage","videoElement","parseInt","disableAllButtons","navigator","mediaDevices","getUserMedia","mediaConstraints","then","catch","audioPromise","audio","screenPromise","getDisplayMedia","allSettled","startRecording","resume","uploadMediaToServer","convertToMp3","mp3DataBlob","lamejs","getLameJs","oggData","audioBuffer","AudioContext","decodeAudioData","left","right","audioIn","channelData","channel","numberOfChannels","rawChannelData","getChannelData","Int16Array","getRawAudioDataFromBuffer","channels","sampleRate","buffer","mp3enc","Mp3Encoder","remaining","samplesPerFrame","mp3buf","mono","subarray","encodeBuffer","leftChunk","rightChunk","d","flush","Int8Array","createMp3","convertOggToMp3","AudioSettings","VideoSettings","video","ideal","ScreenSettings","systemAudio","displaySurface","frameRate","max","questionDiv","getElementById","result","protocol","host","mediaElements","Array","prototype","some","call","media","renderForPromise","closebutton","announce","message","_ref","html","source","buttonElement","sourceElement","createElement","after","setAttribute","appendChild","addPlaybackErrorHandlingToVideoElements","subject","ModalFactory","create","types","ALERT","title","body","modal","show","setSubmitButtonState","thisQuestion","anyRecorded","submitButton","typeInfo","mediaType","audioBitRate","screenBitRate","screenWidth","screenHeight","videoBitRate"],"mappings":"oOA8qCcA,WAAYC,UACtBC,EAAEC,KAAKC,WAAW,QAAUJ,gBACxBK,kBAAkBL,WAAYC,UAClCC,EAAEC,KAAKG,YAAY,QAAUN,gYAlmCxBO,SAASC,OAAQC,cAAeC,MAAOC,kBAItCC,SAAWC,SA0CbC,qBArCAC,YAAc,KAKdC,cAAgB,KAKhBC,OAAS,GAMTC,mBAAqB,EAKrBC,cAAgB,EAMhBC,SAAW,EAKXC,gBAAkB,QAOhBC,OAASd,OAAOe,cAAc,sCAC9BC,YAAchB,OAAOe,cAAc,wCACnCE,WAAajB,OAAOe,cAAc,gCAClCG,aAAelB,OAAOe,cAAc,kCACd,WAAvBd,cAAckB,KAAoB,QAAUlB,cAAckB,OACzDC,mBAAqBpB,OAAOe,cAAc,6CAC1CM,YAAcrB,OAAOe,cAAc,8BACnCO,YAActB,OAAOe,cAAc,2DACnCQ,YAAcvB,OAAOe,cAAc,yEACnCS,cAAgBxB,OAAOe,cAAc,2EACrCU,aAAezB,OAAOe,cAAc,0EACpCW,eAAiB1B,OAAOe,cAAc,qFAyGnCY,+BAA+BC,eAC7BC,UAAWC,YAAcF,WAEN,cAAtBE,WAAWC,mBAEXC,oBAAoBF,WAAWG,cAG7BC,aAAeJ,WAAWK,SAGhCD,aAAaE,iBAAiB,GAAGC,iBAAiB,QAASC,mBAGlC,cAArBT,UAAUE,2BAGNQ,MAAM,wDAA0DV,UAAUI,aAC9EO,sBAAsBN,oBAGpBO,YAAcZ,UAAUM,MAIxBO,eAAiB,IAAIC,YAC3BT,aAAaU,YAAYC,SAAQ,SAASC,OACnB,UAAfA,MAAMC,KACNL,eAAeM,SAASF,OAExBA,MAAMG,UAGdR,YAAYS,iBAAiBL,SAAQ,SAASM,UAC1CT,eAAeM,SAASG,aAG5BX,sBAAsBE,yBAQjBF,sBAAsBY,eAC3B7C,YAAc6C,OAGdlC,aAAamC,UAAYD,OACzBlC,aAAaoC,OAAQ,EACbrD,cAAckB,UACb,QACDoC,cACAzC,OAAO0C,UAAW,EAClB1C,OAAO2C,kBAGN,QACDvC,aAAawC,OACbxC,aAAayC,UAAW,EAExB3D,OAAO4D,QAAQC,MAAQ,WACvBC,eAAe,kBACfhD,OAAO0C,UAAW,EAClB1C,OAAO2C,QACPzD,OAAOe,cAAc,gCAAgCyC,UAAW,YAG/D,SACDtC,aAAawC,OACbxC,aAAayC,UAAW,EACxBJ,cACAvD,OAAOe,cAAc,gCAAgCyC,UAAW,EAKpExC,cACAA,YAAYwC,UAAW,YAQtBD,cAEL/C,cAAgB,IAAIuD,cAAcxD,6BAmjB5ByD,QAAU,MAGW,UAAvB/D,cAAckB,KACd6C,QAAQC,mBAAqBhE,cAAciE,aACxC,GAA2B,UAAvBjE,cAAckB,MAA2C,WAAvBlB,cAAckB,KAAmB,CAC1E6C,QAAQG,mBAAqBlE,cAAciE,QAC3CF,QAAQI,WAAanE,cAAcoE,MACnCL,QAAQM,YAAcrE,cAAcsE,WAG/B,IAAIC,EAAI,EAAGA,EAAIvE,cAAcwE,UAAUC,OAAQF,OAC5CT,cAAcY,gBAAgB1E,cAAcwE,UAAUD,IAAK,CAC3DR,QAAQY,SAAW3E,cAAcwE,UAAUD,iBAMhDR,QAtkBwCa,IAE/CrE,cAAcsE,gBAAkBC,oBAChCvE,cAAcwE,QAAUD,oBACxBvE,cAAcyE,OAASC,0BACvB1E,cAAc2E,MAAM,KAEpBnF,OAAO4D,QAAQC,MAAQ,YAqCvBvD,qBAAuBgB,YAAY8D,QAAQ,CACvC,CAACC,SAAU,mBACX,CAACA,SAAU,sBACZ,CACCC,SAAgD,IAAtCtF,OAAO4D,QAAQ2B,qBACzBC,KAAM,WACNC,MAAO,IAxCXnF,qBAAqBoD,OACrBI,eAAe,iBAiNfnD,cAAsD,IAAtCX,OAAO4D,QAAQ2B,qBAC/BG,uBACAC,qBAjN2B,UAAvB1F,cAAckB,MAA2C,WAAvBlB,cAAckB,OAChDL,OAAO8E,cAAcC,UAAUC,IAAI,QACnC7E,WAAW4E,UAAUE,OAAO,QAC5B9E,WAAW4E,UAAUC,IAAI,UACzBzE,YAAYwE,UAAUE,OAAO,kBAO5BzD,uBACwB,aAAzBtC,OAAO4D,QAAQC,MACf7D,OAAO4D,QAAQC,MAAQ,MACvB3C,aAAa0E,cAAcC,UAAUC,IAAI,QACzC1E,mBAAmByE,UAAUE,OAAO,QACpCjC,eAAe,oBACfhD,OAAOkF,WACJ,OACGC,UAAYjG,OAAOe,cAAc,gCAClCkF,UAAUJ,UAAUK,SAAS,SAC9BD,UAAUlF,cAAc,gCAAgCoF,QAGhEC,4BAsBKrB,oBAAoBsB,OACpBA,MAAMC,OAKX5F,oBAAsB2F,MAAMC,KAAKC,KAC7BpG,WAAWqG,eAAiB,GAAK9F,oBAAsBP,WAAWqG,gBAG7DC,aAAaC,QAAQ,WAMtBD,aAAaE,WAAW,YALxBF,aAAaG,QAAQ,UAAW,QAChCC,gBACA3G,MAAM4G,UAAU,oBAQxBrG,OAAOsG,KAAKV,MAAMC,WAIsB,IAA7B5G,EAAEsH,wBACRC,OAAOC,SAASC,SAASC,SAAS,0BACnC1H,EAAEsH,uBAAuBK,6BAiCxBR,gBAEL/F,OAAO0C,UAAW,EAGlB8D,qBAGAxG,OAAO+E,UAAUE,OAAO,cACxBjF,OAAO+E,UAAUC,IAAI,sBACjB9E,cACAuG,oBAAoB,SACpBvG,YAAY4E,cAAcC,UAAUC,IAAI,SAI5CxF,qBAAqBkH,SAGrBhH,cAAcyC,aAGRwE,OAASlH,YAAYqC,gBACtB,IAAI4B,EAAI,EAAGA,EAAIiD,OAAO/C,OAAQF,IAC/BiD,OAAOjD,GAAGvB,gBAOTiC,+BACwB,QAAzBlF,OAAO4D,QAAQC,mBAMb6D,KAAO,IAAIC,KAAKlH,OAAQ,CAACmH,KAAMpH,cAAcoE,WACnD1D,aAAamC,UAAY,KACzBnC,aAAa2G,IAAMC,IAAIC,gBAAgBL,MAGvCxG,aAAaoC,OAAQ,EACrBpC,aAAayC,UAAW,EACxBzC,aAAa0E,cAAcC,UAAUE,OAAO,QAC5C3E,mBAAmByE,UAAUC,IAAI,QACjC5E,aAAauC,QAEc,UAAvBxD,cAAckB,KACdE,YAAYwE,UAAUC,IAAI,SAG1BhF,OAAO8E,cAAcC,UAAUE,OAAO,QACtC9E,WAAW4E,UAAUC,IAAI,QACzB7E,WAAW4E,UAAUE,OAAO,WAIhCjF,OAAO0C,UAAW,EAClB1C,OAAO+E,UAAUE,OAAO,cACxBjF,OAAO+E,UAAUC,IAAI,sBACrB9F,OAAO4D,QAAQC,MAAQ,WAEnBpD,OAAOiE,OAAS,GAChBxE,MAAM8H,wBAAwB5H,mBAS7B4B,oBAAoBiG,oBACrB1F,MAAM,4DACNA,MAAM0F,OAEVC,sBAAsB,mBACtBpE,eAAe,gBACfhD,OAAO+E,UAAUE,OAAO,cACxBjF,OAAO+E,UAAUC,IAAI,sBACrB9F,OAAO4D,QAAQC,MAAQ,MAEvBxC,YAAYwE,UAAUC,IAAI,QAEtBtF,eAAyC,aAAxBA,cAAcqD,OAC/BrD,cAAcyC,aAIZkF,WAAa,MAAQF,MAAM9G,KAAKiH,QAAQ,QAAS,IAAIC,cAE3DnI,MAAM4G,UAAUqB,YAChB/B,4BAeKkB,qBACL3G,cAAgBC,SAAW0H,KAAKC,MACR,IAApB1H,kBACA2H,cAAc3H,iBACdA,gBAAkB,YAOjB6E,uBACL9E,SAAW0H,KAAKC,MAAQ5H,cACA,IAApBE,kBACAA,gBAAkB4H,YAAY9C,mBAAoB,eAOjDA,2BACC+C,sBAAwB9H,SAAW0H,KAAKC,MACxCI,iBAAmBC,KAAKC,MAAMH,sBAAwB,KAG5DI,iBAFqB9I,OAAO4D,QAAQ2B,qBAAuBoD,iBAE5BA,kBAC3BD,uBAAyB,GACzB7B,yBAUCkC,qBAAqBC,eACpBC,KAAOD,QAAU,GACjBE,KAAON,KAAKC,OAAOG,QAAUC,MAAQ,WAEpCvJ,EAAEC,KAAKwJ,WAAW,cAAe,kBACpC,CAACD,KAAME,IAAIF,MAAOD,KAAMG,IAAIH,iBAa3BH,iBAAiBO,aAAcV,kBAEpCpH,YAAY+H,UAAYP,qBAAqBJ,kBAC7CnH,cAAc8H,UAAYP,qBAAqBM,cAE/C5H,aAAa6H,UAAYP,qBAAqBJ,kBAC9CjH,eAAe4H,UAAYP,qBAAqBM,uBAS3CD,IAAIG,WACHC,UAAYD,IAAM,UAEpBC,UAAU9E,OAAS,EACZ,IAAM8E,UAEN,GAAKA,mBAmDXC,aAAaC,UAAWC,qBACtB,IAAIC,SAASC,gBACVC,aAAe,IAAIC,eACzBD,aAAaE,KAAK,MAAON,WACzBI,aAAaH,aAAeA,aAC5BG,aAAazH,iBAAiB,QAAQ,KAClCwH,QAAQC,aAAaG,aAEzBH,aAAaI,yBA4ENC,oBAAoBC,QAASC,OACxCvG,eAAe,yBAA0B8E,KAAKC,MAAM,IAAMuB,QAAUC,cAE9D,IAAIT,SAAQC,SAAWS,sBAAsBT,oBAS9CU,uBAAuB7C,KAAM8C,yBAG5BC,SAAW,IAAIC,SACrBD,SAASE,OAAO,mBAAoBjD,KAAM8C,mBAC1CC,SAASE,OAAO,UAAWjL,EAAEkL,IAAIC,SACjCJ,SAASE,OAAO,UAAWxK,WAAW2K,oBACtCL,SAASE,OAAO,SAAUxK,WAAW4K,aACrCN,SAASE,OAAO,WAAY,KAC5BF,SAASE,OAAO,SAAUxK,WAAW6K,WACrCP,SAASE,OAAO,YAAa,WAEvBM,cAAgB,IAAIlB,eAC1BkB,cAAc5I,iBAAiB,mBAAoB6I,+BACnDD,cAAcE,OAAO9I,iBAAiB,WAAY+I,sBAClDH,cAAc5I,iBAAiB,QAASgJ,mBACxCJ,cAAc5I,iBAAiB,QAASiJ,mBACxCL,cAAcjB,KAAK,OAAQtK,EAAEkL,IAAIW,QAAU,iDAC3CN,cAAcf,KAAKO,mBAOdS,8BAA8BM,SAC7BP,cAAgBO,EAAEC,UACS,IAA7BR,cAAcS,kBAIDC,KAAKC,MAAMX,cAAcY,cAC7BC,WACTT,oBAGyB,MAAzBJ,cAAclJ,QAEd+B,eAAe,gBACfhD,OAAO+E,UAAUE,OAAO,sBACxBK,oBACgC,MAAzB6E,cAAclJ,SACrBmG,sBAAsB,mBACtB9B,6BAQCgF,qBAAqBI,GAC1B1H,eAAe,iBAAkB8E,KAAKC,MAAM2C,EAAEO,OAASP,EAAEnB,MAAQ,KAAO,cAMnEgB,oBACLnD,sBAAsB,gBACtB9B,4BAMKkF,oBACLpD,sBAAsB,iBACtB9B,4BASKtC,eAAekI,WAAYC,QACtBC,IAAND,IAEAA,EAAI,+BAAiCjM,OAAO4D,QAAQuI,WAAa,WAErErL,OAAOsL,UAAY1M,EAAEC,KAAKwJ,WAAW6C,WAAY,kBAAmBC,YAQ/D1E,oBAAoByE,YACzBhL,YAAYsI,UAAY5J,EAAEC,KAAKwJ,WAAW6C,WAAY,4BAQjD9D,sBAAsB8D,YAC3B5K,mBAAmBiL,YAAc3M,EAAEC,KAAKwJ,WAAW6C,WAAY,mBAC/D9K,aAAa0E,cAAcC,UAAUC,IAAI,QACzC1E,mBAAmByE,UAAUE,OAAO,iBAkC/BK,mBACLkG,wBAAuB,GACvBpM,MAAMqM,qCAeDD,6BAAuBE,gEAC5BC,SAASC,iBAAiB,kBAAkB7J,SAAQ8J,SAChDA,OAAOD,iBAAiB,kDAAkD7J,SAAQ/B,SAC9EA,OAAO0C,UAAYgJ,uBAQtBI,yBAEkB,aADAtM,qBAAqBuM,WAAa,WAErDvM,qBAAqBwM,QAErBxM,qBAAqBoD,OA7yB7B1D,OAAOqC,iBAAiB,kBAQGmJ,SACjBuB,cAAgBvB,EAAEC,OAAOuB,QAAQ,cAClCD,eAAiBA,cAAclH,UAAUK,SAAS,uBAGvDsF,EAAEyB,iBACMjN,OAAO4D,QAAQC,WACd,UACA,6BA6BHqJ,aAAelN,OAAOe,cAAc,sBACtCmM,cACAA,aAAanH,eAGXoH,aAAenN,OAAOe,cAAc,SACtCoM,cAAgBA,aAAatH,UAAUK,SAAS,WAChDiH,aAAatH,UAAUE,OAAO,UAIlC+C,iBAAiB,EAAGsE,SAASpN,OAAO4D,QAAQ2B,uBAEjB,UAAvBtF,cAAckB,MACdD,aAAa0E,cAAcC,UAAUC,IAAI,QACzC1E,mBAAmByE,UAAUC,IAAI,QACjCzE,YAAYwE,UAAUE,OAAO,UAG7B7E,aAAa0E,cAAcC,UAAUE,OAAO,QAC5C3E,mBAAmByE,UAAUC,IAAI,YAErC9E,MAAAA,aAAAA,YAAa4E,cAAcC,UAAUE,OAAO,QAG5CjF,OAAO+E,UAAUE,OAAO,sBACxBjF,OAAO+E,UAAUC,IAAI,yBA8sBrBwG,wBAAuB,GA3sBvBe,GAGA5M,OAAS,GACTC,mBAAqB,EAGM,WAAvBT,cAAckB,iBACdmM,UAAUC,aAAaC,aAAavN,cAAcwN,kBAC7CC,KAAKlL,uBACLmL,MAAM3L,2BAKT4L,aAAeN,UAAUC,aAAaC,aAAa,CAACK,OAAO,IAC3DC,cAAgBR,UAAUC,aAAaQ,gBAAgB9N,cAAcwN,kBAK3E7D,QAAQoE,WAAW,CAACJ,aAAcE,gBAAgBJ,KAAK/L,gCA9E/CsM,aAEC,WACD1K,wBAEC,YACGwJ,gBAAkB/L,aAwQ9BsG,qBACAC,oBAAoB,UACpB/G,cAAcsM,QACd9M,OAAO4D,QAAQC,MAAQ,SAEvB+I,0BA1QY/F,0BAGH,SACGkG,gBAAkB/L,aA8Q9B0E,uBACA1F,OAAO4D,QAAQC,MAAQ,YACvB0D,oBAAoB,SACpB/G,cAAc0N,SAEdtB,0BAhRY/F,yBAhCXsH,wCAwfDrK,eAAe,mBAEX9D,OAAO4D,QAAQwK,aAAc,OACvBC,iCAgBiB3E,iBACrB4E,2PAac5O,EAAEkL,IAAIW,QAAU,8VAAhB7L,EAAEkL,IAAIW,QAAU,8HAAhB7L,EAAEkL,IAAIW,QAAU,sEAbfgD,GACfC,cAAgB/E,aAAaC,UAAW,eACxC+E,kBAAqB,IAAIC,cAAgBC,gBAAgBH,UACxDI,KAAMC,gBAsCkBC,eACzBC,YAAc,OAEf,IAAIC,QAAU,EAAGA,QAAUF,QAAQG,iBAAkBD,UAAW,OAC3DE,eAAiBJ,QAAQK,eAAeH,SAC9CD,YAAYC,SAAW,IAAII,WAAWN,QAAQpK,YACzC,IAAIF,EAAI,EAAGA,EAAIsK,QAAQpK,OAAQF,IAGhCuK,YAAYC,SAASxK,GAAyB,MAApB0K,eAAe1K,UAI1CuK,YAnDeM,CAA0BZ,yCAgE3BH,OAAQgB,SAAUC,WAAYX,UAAMC,6DAAQ,WAC3DW,OAAS,GACTC,OAAS,IAAInB,OAAOoB,WAAWJ,SAAUC,WAAYtP,cAAciE,QAAU,SAC/EyL,UAAYf,KAAKlK,aACfkL,gBAAkB,SACpBC,aAEE1F,oBAAoB,EAAGyE,KAAKlK,YAC7B,IAAIF,EAAI,EAAGmL,WAAaC,gBAAiBpL,GAAKoL,gBAAiB,IAC/C,IAAbN,SAAgB,OACVQ,KAAOlB,KAAKmB,SAASvL,EAAGA,EAAIoL,iBAClCC,OAASJ,OAAOO,aAAaF,UAC1B,OACGG,UAAYrB,KAAKmB,SAASvL,EAAGA,EAAIoL,iBACjCM,WAAarB,MAAMkB,SAASvL,EAAGA,EAAIoL,iBACzCC,OAASJ,OAAOO,aAAaC,UAAWC,YAExCL,OAAOnL,OAAS,GAChB8K,OAAOzI,KAAK8I,QAEhBF,WAAaC,gBACTpL,GAAK,GAAKoL,kBAAqB,SACzBzF,oBAAoB3F,EAAGoK,KAAKlK,cAGpCyL,EAAIV,OAAOW,QACbD,EAAEzL,OAAS,GACX8K,OAAOzI,KAAK,IAAIsJ,UAAUF,iBAExBhG,oBAAoByE,KAAKlK,OAAQkK,KAAKlK,QAErC,IAAIiD,KAAK6H,OAAQ,CAAC5H,KAAM,cA9FlB0I,CAAUhC,OAAQG,YAAYQ,iBAAkBR,YAAYc,WAAYX,KAAMC,OArB7D0B,CAAgBrP,aAAa2G,KACvD3G,aAAa2G,IAAMC,IAAIC,gBAAgBsG,aACvC9D,uBAAuB8D,YAAarO,OAAO4D,QAAQ4G,kBAAkBpC,QAAQ,SAAU,aACpF,CAGHmC,6BAD0Bd,aAAavI,aAAa2G,IAAK,QACrB7H,OAAO4D,QAAQ4G,8BAsTtDgG,cAActM,cACd/C,KAAO,aACP+C,QAAUkJ,SAASlJ,QAAS,SAC5BuJ,iBAAmB,CACpBI,OAAO,QAENpJ,UAAY,CACb,yBACA,kCAYCgM,cAAcvM,QAASG,MAAOE,aAC9BpD,KAAO,aACP+C,QAAUkJ,SAASlJ,QAAS,SAC5BG,MAAQ+I,SAAS/I,MAAO,SACxBE,OAAS6I,SAAS7I,OAAQ,SAC1BkJ,iBAAmB,CACpBI,OAAO,EACP6C,MAAO,CACHrM,MAAO,CAACsM,MAAOtQ,KAAKgE,OACpBE,OAAQ,CAACoM,MAAOtQ,KAAKkE,eAGxBE,UAAY,CACb,6BACA,8BACA,uCAYCmM,eAAe1M,QAASG,MAAOE,aAC/BpD,KAAO,cACP+C,QAAUkJ,SAASlJ,QAAS,SAC5BG,MAAQ+I,SAAS/I,MAAO,SACxBE,OAAS6I,SAAS7I,OAAQ,SAC1BkJ,iBAAmB,CACpBI,OAAO,EACPgD,YAAa,UACbH,MAAO,CACHI,eAAgB,UAChBC,UAAW,CAACJ,MAAO,IAGnBtM,MAAO,CAAC2M,IAAK3Q,KAAKgE,OAClBE,OAAQ,CAACyM,IAAK3Q,KAAKkE,eAKtBE,UAAY,CACb,6BACA,6BACA,wCAWC5E,kBAAkBL,WAAYC,gBAC7BwR,YAAcxE,SAASyE,eAAe1R,YAGtC2R,OA1+BA7D,UAAUC,cAAgBtG,OAAOlD,cAKb,WAAtBmD,SAASkK,UACa,cAAlBlK,SAASmK,MAA0C,cAAlBnK,SAASmK,KACvC,KAEA,WARA,cA0+BI,aAAXF,mBACAF,YAAYlQ,cAAc,kBAAkB8E,UAAUE,OAAO,QAE1D,GAAe,aAAXoL,mBACPF,YAAYlQ,cAAc,sBAAsB8E,UAAUE,OAAO,0BAwC3DuL,cAAgBL,YAAYvE,iBAAiB,qEAG9C6E,MAAMC,UAAUC,KAAKC,KAAKJ,eAAeK,OAAiE,OAAvDA,MAAM5Q,cAAc,2DAKlE6Q,iBAAiB,0BAA2B,CAC9CC,aAAa,EACbC,UAAU,EACVC,QAASd,YAAYlQ,cACb,iEAAiE6C,QAAQsJ,eAEvFQ,MAAKsE,WAACC,KAACA,WAELX,cAAczO,SAAQ7C,eACZmN,aAAenN,OAAOe,cAAc,YAGN,KAAhCoM,aAAavJ,QAAQsO,oBAInBC,cAAiBhF,aAAapM,cAAc,gDAE5CqR,cAAgB3F,SAAS4F,cAAc,UAC7CD,cAAc/P,iBAAiB,SAAS,KAEpC8K,aAAamF,MAAML,MACfE,gBACAA,cAAc3O,UAAW,MAIjC2J,aAAa9K,iBAAiB,cAAc,KAExC8K,aAAatH,UAAUE,OAAO,UAC1BoM,gBACAA,cAAc3O,UAAW,MAIjC4O,cAAcG,aAAa,MAAOpF,aAAavJ,QAAQsO,QACvD/E,aAAaqF,YAAYJ,qBAE9BzE,OAAO1F,qBACF1F,MAAM,8CACNA,MAAM0F,UApFlBwK,QAGK3L,mBA+Gc4L,gBACRC,uBAAaC,OAAO,CACvBhL,KAAM+K,uBAAaE,MAAMC,MACzBC,MAAOrT,EAAEC,KAAKwJ,WAAWuJ,QAAU,SAAU,mBAC7CM,KAAMtT,EAAEC,KAAKwJ,WAAWuJ,QAAS,qBAClChF,MAAK,SAASuF,cACbA,MAAMC,OACCD,eArHVjL,iCA8H4B5H,UAC7BA,SAAS+N,4BA9HR5B,0BAA4B4G,2BAC3BC,aAAe/S,cAwFZ8S,2BACDE,aAAc,EAClBpC,YAAYvE,iBAAiB,gGACxB7J,SAAQ,SAAS7C,QACe,aAAzBA,OAAO4D,QAAQC,QACfwP,aAAc,YAGpBC,aAAerC,YAAYlQ,cAAc,6BAC3CuS,eACAA,aAAa9P,UAAY6P,aA/FjCpC,YAAYvE,iBAAiB,gGACxB7J,SAAQ,SAAS7C,YAEVuT,gBACIvT,OAAO4D,QAAQ4P,eACd,QACDD,SAAW,IAAI/C,cAAc/Q,SAASgU,wBAErC,SACDF,SAAW,IAAI3C,eAAenR,SAASiU,cAAejU,SAASkU,YAAalU,SAASmU,4BAGrFL,SAAW,IAAI9C,cAAchR,SAASoU,aAAcpU,SAAS2E,WAAY3E,SAAS6E,wBAKtFvE,SAASC,OAAQuT,SAAUH,aAAc3T,UACtC,cAEf0T"}