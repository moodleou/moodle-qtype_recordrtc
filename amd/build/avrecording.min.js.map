{"version":3,"file":"avrecording.min.js","sources":["../src/avrecording.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n//\r\n\r\n/**\r\n * JavaScript to the recording work.\r\n *\r\n * We would like to thank the creators of atto_recordrtc, whose\r\n * work originally inspired this.\r\n *\r\n * This script uses some third-party JavaScript and loading that within Moodle/ES6\r\n * requires some contortions. The main classes here are:\r\n *\r\n * * Recorder - represents one recording widget. This works in a way that is\r\n *   not particularly specific to this question type.\r\n * * RecordRtcQuestion - represents one question, which may contain several recorders.\r\n *   It deals with the interaction between the recorders and the question.\r\n *\r\n * @module    qtype_recordrtc/avrecording\r\n * @copyright 2019 The Open University\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Log from 'core/log';\r\nimport ModalFactory from 'core/modal_factory';\r\n\r\n/**\r\n * Verify that the question type can work. If not, show a warning.\r\n *\r\n * @return {string} 'ok' if it looks OK, else 'nowebrtc' or 'nothttps' if there is a problem.\r\n */\r\nfunction checkCanWork() {\r\n    // Check APIs are known.\r\n    if (!(navigator.mediaDevices && window.MediaRecorder)) {\r\n        return 'nowebrtc';\r\n    }\r\n\r\n    // Check protocol (localhost).\r\n    if (location.protocol === 'https:' ||\r\n            location.host === 'localhost' || location.host === '127.0.0.1') {\r\n        return 'ok';\r\n    } else {\r\n        return 'nothttps';\r\n    }\r\n}\r\n\r\n/**\r\n * Object for actually doing the recording.\r\n *\r\n * The recorder can be in one of several states, which is stored in a data-state\r\n * attribute on the outer span (widget). The states are:\r\n *\r\n *  - new:       there is no recording yet. Button shows 'Start recording' (audio) or 'Start camera' (video).\r\n *  - starting:  (video only) camera has started, but we are not recording yet. Button show 'Start recording'.\r\n *  - recording: Media is being recorded. Pause button visible if allowed. Main button shows 'Stop'. Countdown displayed.\r\n *  - paused:    If pause was pressed. Media recording paused, but resumable. Pause button changed to say 'resume'.\r\n *  - saving:    Media being uploaded. Progress indication shown. Pause button hidden if was visible.\r\n *  - recorded:  Recording and upload complete. The button then shows 'Record again'.\r\n *\r\n * @param {HTMLElement} widget the DOM node that is the top level of the whole recorder.\r\n * @param {(AudioSettings|VideoSettings)} mediaSettings information about the media type.\r\n * @param {Object} owner the object we are doing the recording for. Must provide three callback functions\r\n *                       showAlert notifyRecordingComplete notifyButtonStatesChanged.\r\n * @param {Object} uploadInfo object with fields uploadRepositoryId, draftItemId, contextId and maxUploadSize.\r\n * @constructor\r\n */\r\nfunction Recorder(widget, mediaSettings, owner, uploadInfo) {\r\n    /**\r\n     * @type {Recorder} reference to this recorder, for use in event handlers.\r\n     */\r\n    const recorder = this;\r\n\r\n    /**\r\n     * @type {MediaStream} during recording, the stream of incoming media.\r\n     */\r\n    let mediaStream = null;\r\n\r\n    /**\r\n     * @type {MediaRecorder} the recorder that is capturing stream.\r\n     */\r\n    let mediaRecorder = null;\r\n\r\n    /**\r\n     * @type {Blob[]} the chunks of data that have been captured so far during the current recording.\r\n     */\r\n    let chunks = [];\r\n\r\n    /**\r\n     * @type {number} number of bytes recorded so far, so we can auto-stop\r\n     * before hitting Moodle's file-size limit.\r\n     */\r\n    let bytesRecordedSoFar = 0;\r\n\r\n    /**\r\n     * @type {number} when paused, the time left in milliseconds, so we can auto-stop at the time limit.\r\n     */\r\n    let timeRemaining = 0;\r\n\r\n    /**\r\n     * @type {number} while recording, the time we reach the time-limit, so we can auto-stop then.\r\n     * This is milliseconds since Unix epoch, so comparable with Date.now().\r\n     */\r\n    let stopTime = 0;\r\n\r\n    /**\r\n     * @type {number} intervalID returned by setInterval() while the timer is running.\r\n     */\r\n    let countdownTicker = 0;\r\n\r\n    /**\r\n     * @type {object} The progress bar animation object.\r\n     */\r\n    let progressBarAnimation;\r\n\r\n    const button = widget.querySelector('button.qtype_recordrtc-main-button');\r\n    const pauseButton = widget.querySelector('.qtype_recordrtc-pause-button button');\r\n    const controlRow = widget.querySelector('.qtype_recordrtc-control-row');\r\n    const mediaElement = widget.querySelector('.qtype_recordrtc-media-player ' +\r\n        (mediaSettings.name === 'screen' ? 'video' : mediaSettings.name));\r\n    const noMediaPlaceholder = widget.querySelector('.qtype_recordrtc-no-recording-placeholder');\r\n    const timeDisplay = widget.querySelector('.qtype_recordrtc-time-left');\r\n    const progressBar = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front');\r\n    const backTimeEnd = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-back span.timer-end');\r\n    const backtimeStart = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-back span.timer-start');\r\n    const frontTimeEnd = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front span.timer-end');\r\n    const fronttimeStart = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front span.timer-start');\r\n\r\n    widget.addEventListener('click', handleButtonClick);\r\n    this.uploadMediaToServer = uploadMediaToServer; // Make this method available.\r\n\r\n    /**\r\n     * Handles clicks on the start/stop and pause buttons.\r\n     *\r\n     * @param {Event} e\r\n     */\r\n    function handleButtonClick(e) {\r\n        const clickedButton = e.target.closest('button');\r\n        if (!clickedButton) {\r\n            return; // Not actually a button click.\r\n        }\r\n        e.preventDefault();\r\n        switch (widget.dataset.state) {\r\n            case 'new':\r\n            case 'recorded':\r\n                startRecording();\r\n                break;\r\n            case 'starting':\r\n                startSaving();\r\n                break;\r\n            case 'recording':\r\n                if (clickedButton === pauseButton) {\r\n                    pause();\r\n                } else {\r\n                    stopRecording();\r\n                }\r\n                break;\r\n            case 'paused':\r\n                if (clickedButton === pauseButton) {\r\n                    resume();\r\n                } else {\r\n                    stopRecording();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start recording (because the button was clicked).\r\n     */\r\n    function startRecording() {\r\n\r\n        // Reset timer label.\r\n        setLabelForTimer(0, parseInt(widget.dataset.maxRecordingDuration));\r\n\r\n        if (mediaSettings.name === 'audio') {\r\n            mediaElement.parentElement.classList.add('hide');\r\n            noMediaPlaceholder.classList.add('hide');\r\n            timeDisplay.classList.remove('hide');\r\n\r\n        } else {\r\n            mediaElement.parentElement.classList.remove('hide');\r\n            noMediaPlaceholder.classList.add('hide');\r\n        }\r\n        pauseButton?.parentElement.classList.remove('hide');\r\n\r\n        // Change look of recording button.\r\n        button.classList.remove('btn-outline-danger');\r\n        button.classList.add('btn-danger');\r\n\r\n        // Disable other question buttons when current widget stared recording.\r\n        disableAllButtons();\r\n\r\n        // Empty the array containing the previously recorded chunks.\r\n        chunks = [];\r\n        bytesRecordedSoFar = 0;\r\n\r\n        // Normal case.\r\n        if (mediaSettings.name !== 'screen') {\r\n            navigator.mediaDevices.getUserMedia(mediaSettings.mediaConstraints)\r\n                .then(handleCaptureStarting)\r\n                .catch(handleCaptureFailed);\r\n            return;\r\n        }\r\n\r\n        // Screen recording requires both audio and the screen, and we need to get them both together.\r\n        const audioPromise = navigator.mediaDevices.getUserMedia({audio: true});\r\n        const screenPromise = navigator.mediaDevices.getDisplayMedia(mediaSettings.mediaConstraints);\r\n\r\n        // If the audioPromise is \"rejected\" (indicating that the user does not want to share their voice),\r\n        // we will proceed to record their screen without audio.\r\n        // Therefore, we will use Promise.allSettled instead of Promise.all.\r\n        Promise.allSettled([audioPromise, screenPromise]).then(combineAudioAndScreenRecording);\r\n    }\r\n\r\n    /**\r\n     * For starting screen recording, once we have both audio and video, combine them.\r\n     *\r\n     * @param {Object[]} results from the above Promise.allSettled call.\r\n     */\r\n    function combineAudioAndScreenRecording(results) {\r\n        const [audioData, screenData] = results;\r\n\r\n        if (screenData.status !== 'fulfilled') {\r\n            // If the user does not grant screen permission show warning popup.\r\n            handleCaptureFailed(screenData.reason);\r\n            return;\r\n        }\r\n        const screenStream = screenData.value;\r\n\r\n        // Prepare to handle if the user clicks the browser's \"Stop Sharing Screen\" button.\r\n        screenStream.getVideoTracks()[0].addEventListener('ended', handleStopSharing);\r\n\r\n        // Handle microphone.\r\n        if (audioData.status !== 'fulfilled') {\r\n            // We could not get audio. In this case, we just continue without audio,\r\n            // but put the message in the console in case we need to debug.\r\n            Log.debug(\"Could not capture audio. Continuing without. Reason: \" + audioData.reason);\r\n            handleCaptureStarting(screenStream);\r\n            return;\r\n        }\r\n        const audioStream = audioData.value;\r\n\r\n        // Merge the video track from the media stream with the audio track from the microphone stream\r\n        // and stop any unnecessary tracks to ensure that the recorded video has microphone sound.\r\n        const composedStream = new MediaStream();\r\n        screenStream.getTracks().forEach(function(track) {\r\n            if (track.kind === 'video') {\r\n                composedStream.addTrack(track);\r\n            } else {\r\n                track.stop();\r\n            }\r\n        });\r\n        audioStream.getAudioTracks().forEach(function(micTrack) {\r\n            composedStream.addTrack(micTrack);\r\n        });\r\n\r\n        handleCaptureStarting(composedStream);\r\n    }\r\n\r\n    /**\r\n     * Callback once getUserMedia has permission from the user to access the recording devices.\r\n     *\r\n     * @param {MediaStream} stream the stream to record.\r\n     */\r\n    function handleCaptureStarting(stream) {\r\n        mediaStream = stream;\r\n\r\n        // Setup the UI for during recording.\r\n        mediaElement.srcObject = stream;\r\n        mediaElement.muted = true;\r\n        switch (mediaSettings.name) {\r\n            case 'audio':\r\n                startSaving();\r\n                button.disabled = false;\r\n                button.focus();\r\n                break;\r\n\r\n            case 'video':\r\n                mediaElement.play();\r\n                mediaElement.controls = false;\r\n\r\n                widget.dataset.state = 'starting';\r\n                setButtonLabel('startrecording');\r\n                button.disabled = false;\r\n                button.focus();\r\n                widget.querySelector('.qtype_recordrtc-stop-button').disabled = false;\r\n                break;\r\n\r\n            case 'screen':\r\n                mediaElement.play();\r\n                mediaElement.controls = false;\r\n                startSaving();\r\n                widget.querySelector('.qtype_recordrtc-stop-button').disabled = false;\r\n                break;\r\n        }\r\n\r\n        // Make button clickable again, to allow starting/stopping recording.\r\n        if (pauseButton) {\r\n            pauseButton.disabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For recording types which show the media during recording,\r\n     * this starts the loop-back display, but does not start recording it yet.\r\n     */\r\n    function startSaving() {\r\n        // Initialize MediaRecorder events and start recording.\r\n        mediaRecorder = new MediaRecorder(mediaStream, getRecordingOptions());\r\n\r\n        mediaRecorder.ondataavailable = handleDataAvailable;\r\n        mediaRecorder.onpause = handleDataAvailable;\r\n        mediaRecorder.onstop = handleRecordingHasStopped;\r\n        mediaRecorder.start(1000); // Capture in one-second chunks. Firefox requires that.\r\n\r\n        widget.dataset.state = 'recording';\r\n        // Initialize and start the animation.\r\n        initProgressBarAnimation();\r\n        progressBarAnimation.play();\r\n        setButtonLabel('stoprecording');\r\n        startCountdownTimer();\r\n        if (mediaSettings.name === 'video' || mediaSettings.name === 'screen') {\r\n            button.parentElement.classList.add('hide');\r\n            controlRow.classList.remove('hide');\r\n            controlRow.classList.add('d-flex');\r\n            timeDisplay.classList.remove('hide');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback that is called by the user clicking Stop screen sharing on the browser.\r\n     */\r\n    function handleStopSharing() {\r\n        if (widget.dataset.state === 'starting') {\r\n            widget.dataset.state = 'new';\r\n            mediaElement.parentElement.classList.add('hide');\r\n            noMediaPlaceholder.classList.remove('hide');\r\n            setButtonLabel('startsharescreen');\r\n            button.blur();\r\n        } else {\r\n            const controlEl = widget.querySelector('.qtype_recordrtc-control-row');\r\n            if (!controlEl.classList.contains('hide')) {\r\n                controlEl.querySelector('.qtype_recordrtc-stop-button').click();\r\n            }\r\n        }\r\n        enableAllButtons();\r\n    }\r\n\r\n    /**\r\n     * Function to initialise progress bar animation.\r\n     */\r\n    function initProgressBarAnimation() {\r\n        progressBarAnimation = progressBar.animate([\r\n            {clipPath: 'inset(0 0 0 0%)'},\r\n            {clipPath: 'inset(0 0 0 100%)'},\r\n        ], {\r\n            duration: widget.dataset.maxRecordingDuration * 1000,\r\n            fill: 'forwards',\r\n            delay: 0,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback that is called by the media system for each Chunk of data.\r\n     *\r\n     * @param {BlobEvent} event\r\n     */\r\n    function handleDataAvailable(event) {\r\n        if (!event.data) {\r\n            return; // It seems this can happen around pausing.\r\n        }\r\n\r\n        // Check there is space to store the next chunk, and if not stop.\r\n        bytesRecordedSoFar += event.data.size;\r\n        if (uploadInfo.maxUploadSize >= 0 && bytesRecordedSoFar >= uploadInfo.maxUploadSize) {\r\n\r\n            // Extra check to avoid alerting twice.\r\n            if (!localStorage.getItem('alerted')) {\r\n                localStorage.setItem('alerted', 'true');\r\n                stopRecording();\r\n                owner.showAlert('nearingmaxsize');\r\n\r\n            } else {\r\n                localStorage.removeItem('alerted');\r\n            }\r\n        }\r\n\r\n        // Store the next chunk of data.\r\n        chunks.push(event.data);\r\n\r\n        // Notify form-change-checker that there is now unsaved data.\r\n        // But, don't do this in question preview where it is just annoying.\r\n        if (typeof M.core_formchangechecker !== 'undefined' &&\r\n            !window.location.pathname.endsWith('/question/preview.php')) {\r\n            M.core_formchangechecker.set_form_changed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pause recording.\r\n     */\r\n    function pause() {\r\n        // Stop the count-down timer.\r\n        stopCountdownTimer();\r\n        setPauseButtonLabel('resume');\r\n        mediaRecorder.pause();\r\n        widget.dataset.state = 'paused';\r\n        // Pause animate.\r\n        toggleProgressbarState();\r\n    }\r\n\r\n    /**\r\n     * Continue recording.\r\n     */\r\n    function resume() {\r\n        // Stop the count-down timer.\r\n        resumeCountdownTimer();\r\n        widget.dataset.state = 'recording';\r\n        setPauseButtonLabel('pause');\r\n        mediaRecorder.resume();\r\n        // Resume animate.\r\n        toggleProgressbarState();\r\n    }\r\n\r\n    /**\r\n     * Start recording (because the button was clicked or because we have reached a limit).\r\n     */\r\n    function stopRecording() {\r\n        // Disable the button while things change.\r\n        button.disabled = true;\r\n\r\n        // Stop the count-down timer.\r\n        stopCountdownTimer();\r\n\r\n        // Update the button.\r\n        button.classList.remove('btn-danger');\r\n        button.classList.add('btn-outline-danger');\r\n        if (pauseButton) {\r\n            setPauseButtonLabel('pause');\r\n            pauseButton.parentElement.classList.add('hide');\r\n        }\r\n\r\n        // Stop animate.\r\n        progressBarAnimation.cancel();\r\n\r\n        // Ask the recording to stop.\r\n        mediaRecorder.stop();\r\n\r\n        // Also stop each individual MediaTrack.\r\n        const tracks = mediaStream.getTracks();\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            tracks[i].stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback that is called by the media system once recording has finished.\r\n     */\r\n    function handleRecordingHasStopped() {\r\n        if (widget.dataset.state === 'new') {\r\n            // This can happens if an error occurs when recording is starting. Do nothing.\r\n            return;\r\n        }\r\n\r\n        // Set source of the media player.\r\n        const blob = new Blob(chunks, {type: mediaRecorder.mimeType});\r\n        mediaElement.srcObject = null;\r\n        mediaElement.src = URL.createObjectURL(blob);\r\n\r\n        // Show audio player with controls enabled, and unmute.\r\n        mediaElement.muted = false;\r\n        mediaElement.controls = true;\r\n        mediaElement.parentElement.classList.remove('hide');\r\n        noMediaPlaceholder.classList.add('hide');\r\n        mediaElement.focus();\r\n\r\n        if (mediaSettings.name === 'audio') {\r\n            timeDisplay.classList.add('hide');\r\n\r\n        } else {\r\n            button.parentElement.classList.remove('hide');\r\n            controlRow.classList.add('hide');\r\n            controlRow.classList.remove('d-flex');\r\n        }\r\n\r\n        // Ensure the button while things change.\r\n        button.disabled = true;\r\n        button.classList.remove('btn-danger');\r\n        button.classList.add('btn-outline-danger');\r\n        widget.dataset.state = 'recorded';\r\n\r\n        if (chunks.length > 0) {\r\n            owner.notifyRecordingComplete(recorder);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function that handles errors from the recorder.\r\n     *\r\n     * @param {DOMException} error\r\n     */\r\n    function handleCaptureFailed(error) {\r\n        Log.debug('Audio/video/screen question: error received');\r\n        Log.debug(error);\r\n\r\n        setPlaceholderMessage('recordingfailed');\r\n        setButtonLabel('recordagainx');\r\n        button.classList.remove('btn-danger');\r\n        button.classList.add('btn-outline-danger');\r\n        widget.dataset.state = 'new';\r\n        // Hide time display.\r\n        timeDisplay.classList.add('hide');\r\n\r\n        if (mediaRecorder && mediaRecorder.state !== 'inactive') {\r\n            mediaRecorder.stop();\r\n        }\r\n\r\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\r\n        const stringName = 'gum' + error.name.replace('Error', '').toLowerCase();\r\n\r\n        owner.showAlert(stringName);\r\n        enableAllButtons();\r\n    }\r\n\r\n    /**\r\n     * Start the countdown timer.\r\n     */\r\n    function startCountdownTimer() {\r\n        timeRemaining = widget.dataset.maxRecordingDuration * 1000;\r\n        resumeCountdownTimer();\r\n        updateTimerDisplay();\r\n    }\r\n\r\n    /**\r\n     * Stop the countdown timer.\r\n     */\r\n    function stopCountdownTimer() {\r\n        timeRemaining = stopTime - Date.now();\r\n        if (countdownTicker !== 0) {\r\n            clearInterval(countdownTicker);\r\n            countdownTicker = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start or resume the countdown timer.\r\n     */\r\n    function resumeCountdownTimer() {\r\n        stopTime = Date.now() + timeRemaining;\r\n        if (countdownTicker === 0) {\r\n            countdownTicker = setInterval(updateTimerDisplay, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the countdown timer, and stop recording if we have reached 0.\r\n     */\r\n    function updateTimerDisplay() {\r\n        const millisecondsRemaining = stopTime - Date.now();\r\n        const secondsRemaining = Math.round(millisecondsRemaining / 1000);\r\n        const secondsStart = widget.dataset.maxRecordingDuration - secondsRemaining;\r\n        // Set time label for elements.\r\n        setLabelForTimer(secondsStart, secondsRemaining);\r\n        if (millisecondsRemaining <= 0) {\r\n            stopRecording();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get time label for timer.\r\n     *\r\n     * @param {number} seconds The time in seconds.\r\n     * @return {string} The label for timer. e.g. '00:00' or '10:00'.\r\n     */\r\n    function getTimeLabelForTimer(seconds) {\r\n        const secs = seconds % 60;\r\n        const mins = Math.round((seconds - secs) / 60);\r\n\r\n        return M.util.get_string('timedisplay', 'qtype_recordrtc',\r\n            {mins: pad(mins), secs: pad(secs)});\r\n    }\r\n\r\n    /**\r\n     * Set time label for timer.\r\n     * We need to update the labels for both the timer back(whose background color is white) and\r\n     * timer front (with blue background) to create a text effect that contrasts with the background color.\r\n     *\r\n     * @param {Number} secondsStart The second start. e.g: With duration 1 minute\r\n     * secondsStart will start from 0 and increase up to 60.\r\n     * @param {Number} secondsRemaining The second remaining. e.g: With duration 1 minute\r\n     * secondsRemaining will decrease from 60 to 0.\r\n     */\r\n    function setLabelForTimer(secondsStart, secondsRemaining) {\r\n        // Set time label for timer back.\r\n        backTimeEnd.innerText = getTimeLabelForTimer(secondsRemaining);\r\n        backtimeStart.innerText = getTimeLabelForTimer(secondsStart);\r\n        // Set time label for timer front.\r\n        frontTimeEnd.innerText = getTimeLabelForTimer(secondsRemaining);\r\n        fronttimeStart.innerText = getTimeLabelForTimer(secondsStart);\r\n    }\r\n\r\n    /**\r\n     * Zero-pad a string to be at least two characters long.\r\n     *\r\n     * @param {number} val e.g. 1 or 10\r\n     * @return {string} e.g. '01' or '10'.\r\n     */\r\n    function pad(val) {\r\n        const valString = val + '';\r\n\r\n        if (valString.length < 2) {\r\n            return '0' + valString;\r\n        } else {\r\n            return '' + valString;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger the upload of the recorded media back to Moodle.\r\n     */\r\n    async function uploadMediaToServer() {\r\n        setButtonLabel('uploadpreparing');\r\n\r\n        if (widget.dataset.convertToMp3) {\r\n            const mp3DataBlob = await convertOggToMp3(mediaElement.src);\r\n            mediaElement.src = URL.createObjectURL(mp3DataBlob);\r\n            uploadBlobToRepository(mp3DataBlob, widget.dataset.recordingFilename.replace(/\\.ogg$/, '.mp3'));\r\n        } else {\r\n            // First we need to get the media data from the media element.\r\n            const oggDataBlob = await fetchOggData(mediaElement.src, 'blob');\r\n            uploadBlobToRepository(oggDataBlob, widget.dataset.recordingFilename);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert audio data to MP3.\r\n     *\r\n     * @param {string} sourceUrl URL from which to fetch the Ogg audio file to convert.\r\n     * @returns {Promise<Blob>}\r\n     */\r\n    async function convertOggToMp3(sourceUrl) {\r\n        const lamejs = await getLameJs();\r\n        const oggData = await fetchOggData(sourceUrl, 'arraybuffer');\r\n        const audioBuffer = await (new AudioContext()).decodeAudioData(oggData);\r\n        const [left, right] = getRawAudioDataFromBuffer(audioBuffer);\r\n        return await createMp3(lamejs, audioBuffer.numberOfChannels, audioBuffer.sampleRate, left, right);\r\n    }\r\n\r\n    /**\r\n     * Helper to wrap loading the lamejs library.\r\n     *\r\n     * @returns {Promise<*>} access to the lamejs library.\r\n     */\r\n    async function getLameJs() {\r\n        return await import(M.cfg.wwwroot + '/question/type/recordrtc/js/lamejs@1.2.1a-7-g582bbba/lame.min.js');\r\n    }\r\n\r\n    /**\r\n     * Load Ogg data from a URL and return as an ArrayBuffer or a Blob.\r\n     *\r\n     * @param {string} sourceUrl URL from which to fetch the Ogg audio data.\r\n     * @param {XMLHttpRequestResponseType} responseType 'arraybuffer' or 'blob'.\r\n     * @returns {Promise<ArrayBuffer|Blob>} the audio data in the requested structure.\r\n     */\r\n    function fetchOggData(sourceUrl, responseType) {\r\n        return new Promise((resolve) => {\r\n            const fetchRequest = new XMLHttpRequest();\r\n            fetchRequest.open('GET', sourceUrl);\r\n            fetchRequest.responseType = responseType;\r\n            fetchRequest.addEventListener('load', () => {\r\n                resolve(fetchRequest.response);\r\n            });\r\n            fetchRequest.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Extract the raw sample data from an AudioBuffer.\r\n     *\r\n     * @param {AudioBuffer} audioIn an audio buffer, e.g. from a call to decodeAudioData.\r\n     * @returns {Int16Array[]} for each audio channel, a Int16Array of the samples.\r\n     */\r\n    function getRawAudioDataFromBuffer(audioIn) {\r\n        const channelData = [];\r\n\r\n        for (let channel = 0; channel < audioIn.numberOfChannels; channel++) {\r\n            const rawChannelData = audioIn.getChannelData(channel);\r\n            channelData[channel] = new Int16Array(audioIn.length);\r\n            for (let i = 0; i < audioIn.length; i++) {\r\n                // This is not the normal code given for this conversion (which can be\r\n                // found in git history) but this is 10x faster, and surely good enough.\r\n                channelData[channel][i] = rawChannelData[i] * 0x7FFF;\r\n            }\r\n        }\r\n\r\n        return channelData;\r\n    }\r\n\r\n    /**\r\n     * Convert some audio data to MP3.\r\n     *\r\n     * @param {*} lamejs lamejs library from getLameJs().\r\n     * @param {int} channels number of audio channels (1 or 2 supported).\r\n     * @param {int} sampleRate sample rate of the audio to encode.\r\n     * @param {Int16Array} left audio data for the left or only channel.\r\n     * @param {Int16Array|null} right audio data for the right channel, if any.\r\n     * @returns {Blob} representing an MP3 file.\r\n     */\r\n    async function createMp3(lamejs, channels, sampleRate, left, right = null) {\r\n        const buffer = [];\r\n        const mp3enc = new lamejs.Mp3Encoder(channels, sampleRate, mediaSettings.bitRate / 1000);\r\n        let remaining = left.length;\r\n        const samplesPerFrame = 1152;\r\n        let mp3buf;\r\n\r\n        await setPreparingPercent(0, left.length);\r\n        for (let i = 0; remaining >= samplesPerFrame; i += samplesPerFrame) {\r\n            if (channels === 1) {\r\n                const mono = left.subarray(i, i + samplesPerFrame);\r\n                mp3buf = mp3enc.encodeBuffer(mono);\r\n            } else {\r\n                const leftChunk = left.subarray(i, i + samplesPerFrame);\r\n                const rightChunk = right.subarray(i, i + samplesPerFrame);\r\n                mp3buf = mp3enc.encodeBuffer(leftChunk, rightChunk);\r\n            }\r\n            if (mp3buf.length > 0) {\r\n                buffer.push(mp3buf);\r\n            }\r\n            remaining -= samplesPerFrame;\r\n            if (i % (10 * samplesPerFrame) === 0) {\r\n                await setPreparingPercent(i, left.length);\r\n            }\r\n        }\r\n        const d = mp3enc.flush();\r\n        if (d.length > 0) {\r\n            buffer.push(new Int8Array(d));\r\n        }\r\n        await setPreparingPercent(left.length, left.length);\r\n\r\n        return new Blob(buffer, {type: \"audio/mp3\"});\r\n    }\r\n\r\n    /**\r\n     * Set the label on the upload button to a progress message including a percentage.\r\n     *\r\n     * @param {number} current number done so far.\r\n     * @param {number} total number to do in total.\r\n     */\r\n    async function setPreparingPercent(current, total) {\r\n        setButtonLabel('uploadpreparingpercent', Math.round(100 * current / total));\r\n        // Next like is a hack to ensure the screen acutally updates.\r\n        await new Promise(resolve => requestAnimationFrame(resolve));\r\n    }\r\n\r\n    /**\r\n     * Upload the audio file to the Moodle draft file repository.\r\n     *\r\n     * @param {Blob} blob data to upload.\r\n     * @param {string} recordingFilename the filename to use for the uplaod.\r\n     */\r\n    function uploadBlobToRepository(blob, recordingFilename) {\r\n\r\n        // Create FormData to send to PHP filepicker-upload script.\r\n        const formData = new FormData();\r\n        formData.append('repo_upload_file', blob, recordingFilename);\r\n        formData.append('sesskey', M.cfg.sesskey);\r\n        formData.append('repo_id', uploadInfo.uploadRepositoryId);\r\n        formData.append('itemid', uploadInfo.draftItemId);\r\n        formData.append('savepath', '/');\r\n        formData.append('ctx_id', uploadInfo.contextId);\r\n        formData.append('overwrite', '1');\r\n\r\n        const uploadRequest = new XMLHttpRequest();\r\n        uploadRequest.addEventListener('readystatechange', handleUploadReadyStateChanged);\r\n        uploadRequest.upload.addEventListener('progress', handleUploadProgress);\r\n        uploadRequest.addEventListener('error', handleUploadError);\r\n        uploadRequest.addEventListener('abort', handleUploadAbort);\r\n        uploadRequest.open('POST', M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload');\r\n        uploadRequest.send(formData);\r\n    }\r\n\r\n    /**\r\n     * Callback for when the upload completes.\r\n     * @param {ProgressEvent} e\r\n     */\r\n    function handleUploadReadyStateChanged(e) {\r\n        const uploadRequest = e.target;\r\n        if (uploadRequest.readyState !== 4) {\r\n            return; // Not finished yet. We will get more of these events when it is.\r\n        }\r\n\r\n        const response = JSON.parse(uploadRequest.responseText);\r\n        if (response.errorcode) {\r\n            handleUploadError(); // Moodle sends back errors with a 200 status code for some reason!\r\n        }\r\n\r\n        if (uploadRequest.status === 200) {\r\n            // When request finished and successful.\r\n            setButtonLabel('recordagainx');\r\n            button.classList.remove('btn-outline-danger');\r\n            enableAllButtons();\r\n        } else if (uploadRequest.status === 404) {\r\n            setPlaceholderMessage('uploadfailed404');\r\n            enableAllButtons();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback for updating the upload progress.\r\n     * @param {ProgressEvent} e\r\n     */\r\n    function handleUploadProgress(e) {\r\n        setButtonLabel('uploadprogress', Math.round(e.loaded / e.total * 100) + '%');\r\n    }\r\n\r\n    /**\r\n     * Callback for when the upload fails with an error.\r\n     */\r\n    function handleUploadError() {\r\n        setPlaceholderMessage('uploadfailed');\r\n        enableAllButtons();\r\n    }\r\n\r\n    /**\r\n     * Callback for when the upload fails with an error.\r\n     */\r\n    function handleUploadAbort() {\r\n        setPlaceholderMessage('uploadaborted');\r\n        enableAllButtons();\r\n    }\r\n\r\n    /**\r\n     * Change the label on the start/stop button.\r\n     *\r\n     * @param {string} langString\r\n     * @param {string|null} [a] optional variable to populate placeholder with\r\n     */\r\n    function setButtonLabel(langString, a) {\r\n        if (a === undefined) {\r\n            // Seemingly unnecessary space inside the span is needed for screen-readers, and it must be a non-breaking space.\r\n            a = '<span class=\"sr-only\">&nbsp;' + widget.dataset.widgetName + '</span>';\r\n        }\r\n        button.innerHTML = M.util.get_string(langString, 'qtype_recordrtc', a);\r\n    }\r\n\r\n    /**\r\n     * Change the label on the pause button.\r\n     *\r\n     * @param {string} langString\r\n     */\r\n    function setPauseButtonLabel(langString) {\r\n        pauseButton.innerText = M.util.get_string(langString, 'qtype_recordrtc');\r\n    }\r\n\r\n    /**\r\n     * Display a message in the upload progress area.\r\n     *\r\n     * @param {string} langString\r\n     */\r\n    function setPlaceholderMessage(langString) {\r\n        noMediaPlaceholder.textContent = M.util.get_string(langString, 'qtype_recordrtc');\r\n        mediaElement.parentElement.classList.add('hide');\r\n        noMediaPlaceholder.classList.remove('hide');\r\n    }\r\n\r\n    /**\r\n     * Select best options for the recording codec.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    function getRecordingOptions() {\r\n        const options = {};\r\n\r\n        // Get the relevant bit rates from settings.\r\n        if (mediaSettings.name === 'audio') {\r\n            options.audioBitsPerSecond = mediaSettings.bitRate;\r\n        } else if (mediaSettings.name === 'video' || mediaSettings.name === 'screen') {\r\n            options.videoBitsPerSecond = mediaSettings.bitRate;\r\n            options.videoWidth = mediaSettings.width;\r\n            options.videoHeight = mediaSettings.height;\r\n\r\n            // Go through our list of mimeTypes, and take the first one that will work.\r\n            for (let i = 0; i < mediaSettings.mimeTypes.length; i++) {\r\n                if (MediaRecorder.isTypeSupported(mediaSettings.mimeTypes[i])) {\r\n                    options.mimeType = mediaSettings.mimeTypes[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Enable all buttons in the question.\r\n     */\r\n    function enableAllButtons() {\r\n        disableOrEnableButtons(true);\r\n        owner.notifyButtonStatesChanged();\r\n    }\r\n\r\n    /**\r\n     * Disable all buttons in the question.\r\n     */\r\n    function disableAllButtons() {\r\n        disableOrEnableButtons(false);\r\n    }\r\n\r\n    /**\r\n     * Disables/enables other question buttons when current widget started recording/finished recording.\r\n     *\r\n     * @param {boolean} enabled true if the button should be enabled.\r\n     */\r\n    function disableOrEnableButtons(enabled = false) {\r\n        document.querySelectorAll('.que.recordrtc').forEach(record => {\r\n            record.querySelectorAll('button, input[type=submit], input[type=button]').forEach(button => {\r\n                button.disabled = !enabled;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Pause/resume the progressbar state.\r\n     */\r\n    function toggleProgressbarState() {\r\n        const animationState = progressBarAnimation.playState || 'running';\r\n        if (animationState === 'running') {\r\n            progressBarAnimation.pause();\r\n        } else {\r\n            progressBarAnimation.play();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Object that controls the settings for recording audio.\r\n *\r\n * @param {string} bitRate desired audio bitrate.\r\n * @constructor\r\n */\r\nfunction AudioSettings(bitRate) {\r\n    this.name = 'audio';\r\n    this.bitRate = parseInt(bitRate, 10);\r\n    this.mediaConstraints = {\r\n        audio: true\r\n    };\r\n    this.mimeTypes = [\r\n        'audio/webm;codecs=opus',\r\n        'audio/ogg;codecs=opus'\r\n    ];\r\n}\r\n\r\n/**\r\n * Object that controls the settings for recording video.\r\n *\r\n * @param {string} bitRate desired video bitrate.\r\n * @param {string} width desired width.\r\n * @param {string} height desired height.\r\n * @constructor\r\n */\r\nfunction VideoSettings(bitRate, width, height) {\r\n    this.name = 'video';\r\n    this.bitRate = parseInt(bitRate, 10);\r\n    this.width = parseInt(width, 10);\r\n    this.height = parseInt(height, 10);\r\n    this.mediaConstraints = {\r\n        audio: true,\r\n        video: {\r\n            width: {ideal: this.width},\r\n            height: {ideal: this.height}\r\n        }\r\n    };\r\n    this.mimeTypes = [\r\n        'video/webm;codecs=vp9,opus',\r\n        'video/webm;codecs=h264,opus',\r\n        'video/webm;codecs=vp8,opus'\r\n    ];\r\n}\r\n\r\n/**\r\n * Object that controls the settings for recording screen.\r\n *\r\n * @param {string} bitRate desired screen bitrate.\r\n * @param {string} width desired width.\r\n * @param {string} height desired height.\r\n * @constructor\r\n */\r\nfunction ScreenSettings(bitRate, width, height) {\r\n    this.name = 'screen';\r\n    this.bitRate = parseInt(bitRate, 10);\r\n    this.width = parseInt(width, 10);\r\n    this.height = parseInt(height, 10);\r\n    this.mediaConstraints = {\r\n        audio: true,\r\n        systemAudio: 'exclude',\r\n        video: {\r\n            displaySurface: 'monitor',\r\n            frameRate: {ideal: 24},\r\n            // Currently, Safari does not support ideal constraints for width and height with screen sharing feature.\r\n            // It may be supported in version 16.4.\r\n            width: {max: this.width},\r\n            height: {max: this.height},\r\n        }\r\n    };\r\n\r\n    // We use vp8 as the default codec. If it is not supported, we will switch to another codec.\r\n    this.mimeTypes = [\r\n        'video/webm;codecs=vp8,opus',\r\n        'video/webm;codecs=vp9,opus',\r\n        'video/webm;codecs=h264,opus',\r\n    ];\r\n}\r\n\r\n/**\r\n * Represents one record audio or video question.\r\n *\r\n * @param {string} questionId id of the outer question div.\r\n * @param {Object} settings like audio bit rate.\r\n * @constructor\r\n */\r\nfunction RecordRtcQuestion(questionId, settings) {\r\n    const questionDiv = document.getElementById(questionId);\r\n\r\n    // Check if the RTC API can work here.\r\n    const result = checkCanWork();\r\n    if (result === 'nothttps') {\r\n        questionDiv.querySelector('.https-warning').classList.remove('hide');\r\n        return;\r\n    } else if (result === 'nowebrtc') {\r\n        questionDiv.querySelector('.no-webrtc-warning').classList.remove('hide');\r\n        return;\r\n    }\r\n\r\n    // Make the callback functions available.\r\n    this.showAlert = showAlert;\r\n    this.notifyRecordingComplete = notifyRecordingComplete;\r\n    this.notifyButtonStatesChanged = setSubmitButtonState;\r\n    const thisQuestion = this;\r\n\r\n    // We may have more than one widget in a question.\r\n    questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget, .qtype_recordrtc-screen-widget')\r\n        .forEach(function(widget) {\r\n            // Get the appropriate options.\r\n            let typeInfo;\r\n            switch (widget.dataset.mediaType) {\r\n                case 'audio':\r\n                    typeInfo = new AudioSettings(settings.audioBitRate);\r\n                    break;\r\n                case 'screen':\r\n                    typeInfo = new ScreenSettings(settings.screenBitRate, settings.screenWidth, settings.screenHeight);\r\n                    break;\r\n                default:\r\n                    typeInfo = new VideoSettings(settings.videoBitRate, settings.videoWidth, settings.videoHeight);\r\n                    break;\r\n            }\r\n\r\n            // Create the recorder.\r\n            new Recorder(widget, typeInfo, thisQuestion, settings);\r\n            return 'Not used';\r\n        });\r\n    setSubmitButtonState();\r\n\r\n    /**\r\n     * Set the state of the question's submit button.\r\n     *\r\n     * If any recorder does not yet have a recording, then disable the button.\r\n     * Otherwise, enable it.\r\n     */\r\n    function setSubmitButtonState() {\r\n        let anyRecorded = false;\r\n        questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget, .qtype_recordrtc-screen-widget')\r\n            .forEach(function(widget) {\r\n                if (widget.dataset.state === 'recorded') {\r\n                    anyRecorded = true;\r\n                }\r\n            });\r\n        const submitButton = questionDiv.querySelector('input.submit[type=submit]');\r\n        if (submitButton) {\r\n            submitButton.disabled = !anyRecorded;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show a modal alert.\r\n     *\r\n     * @param {string} subject Subject is the content of the alert (which error the alert is for).\r\n     * @return {Promise}\r\n     */\r\n    function showAlert(subject) {\r\n        return ModalFactory.create({\r\n            type: ModalFactory.types.ALERT,\r\n            title: M.util.get_string(subject + '_title', 'qtype_recordrtc'),\r\n            body: M.util.get_string(subject, 'qtype_recordrtc'),\r\n        }).then(function(modal) {\r\n            modal.show();\r\n            return modal;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback called when the recording is completed.\r\n     *\r\n     * @param {Recorder} recorder the recorder.\r\n     */\r\n    function notifyRecordingComplete(recorder) {\r\n        recorder.uploadMediaToServer();\r\n    }\r\n}\r\n\r\n/**\r\n * Initialise a record audio or video question.\r\n *\r\n * @param {string} questionId id of the outer question div.\r\n * @param {Object} settings like audio bit rate.\r\n */\r\nfunction init(questionId, settings) {\r\n    M.util.js_pending('init-' + questionId);\r\n    new RecordRtcQuestion(questionId, settings);\r\n    M.util.js_complete('init-' + questionId);\r\n}\r\n\r\nexport {\r\n    init\r\n};\r\n"],"names":["questionId","settings","M","util","js_pending","RecordRtcQuestion","js_complete","Recorder","widget","mediaSettings","owner","uploadInfo","recorder","this","progressBarAnimation","mediaStream","mediaRecorder","chunks","bytesRecordedSoFar","timeRemaining","stopTime","countdownTicker","button","querySelector","pauseButton","controlRow","mediaElement","name","noMediaPlaceholder","timeDisplay","progressBar","backTimeEnd","backtimeStart","frontTimeEnd","fronttimeStart","combineAudioAndScreenRecording","results","audioData","screenData","status","handleCaptureFailed","reason","screenStream","value","getVideoTracks","addEventListener","handleStopSharing","debug","handleCaptureStarting","audioStream","composedStream","MediaStream","getTracks","forEach","track","kind","addTrack","stop","getAudioTracks","micTrack","stream","srcObject","muted","startSaving","disabled","focus","play","controls","dataset","state","setButtonLabel","MediaRecorder","options","audioBitsPerSecond","bitRate","videoBitsPerSecond","videoWidth","width","videoHeight","height","i","mimeTypes","length","isTypeSupported","mimeType","getRecordingOptions","ondataavailable","handleDataAvailable","onpause","onstop","handleRecordingHasStopped","start","animate","clipPath","duration","maxRecordingDuration","fill","delay","resumeCountdownTimer","updateTimerDisplay","parentElement","classList","add","remove","blur","controlEl","contains","click","enableAllButtons","event","data","size","maxUploadSize","localStorage","getItem","removeItem","setItem","stopRecording","showAlert","push","core_formchangechecker","window","location","pathname","endsWith","set_form_changed","stopCountdownTimer","setPauseButtonLabel","cancel","tracks","blob","Blob","type","src","URL","createObjectURL","notifyRecordingComplete","error","setPlaceholderMessage","stringName","replace","toLowerCase","Date","now","clearInterval","setInterval","millisecondsRemaining","secondsRemaining","Math","round","setLabelForTimer","getTimeLabelForTimer","seconds","secs","mins","get_string","pad","secondsStart","innerText","val","valString","fetchOggData","sourceUrl","responseType","Promise","resolve","fetchRequest","XMLHttpRequest","open","response","send","setPreparingPercent","current","total","requestAnimationFrame","uploadBlobToRepository","recordingFilename","formData","FormData","append","cfg","sesskey","uploadRepositoryId","draftItemId","contextId","uploadRequest","handleUploadReadyStateChanged","upload","handleUploadProgress","handleUploadError","handleUploadAbort","wwwroot","e","target","readyState","JSON","parse","responseText","errorcode","loaded","langString","a","undefined","widgetName","innerHTML","textContent","disableOrEnableButtons","notifyButtonStatesChanged","enabled","document","querySelectorAll","record","toggleProgressbarState","playState","pause","clickedButton","closest","preventDefault","parseInt","disableAllButtons","navigator","mediaDevices","getUserMedia","mediaConstraints","then","catch","audioPromise","audio","screenPromise","getDisplayMedia","allSettled","startRecording","resume","uploadMediaToServer","convertToMp3","mp3DataBlob","lamejs","getLameJs","oggData","audioBuffer","AudioContext","decodeAudioData","left","right","audioIn","channelData","channel","numberOfChannels","rawChannelData","getChannelData","Int16Array","getRawAudioDataFromBuffer","channels","sampleRate","buffer","mp3enc","Mp3Encoder","remaining","samplesPerFrame","mp3buf","mono","subarray","encodeBuffer","leftChunk","rightChunk","d","flush","Int8Array","createMp3","convertOggToMp3","AudioSettings","VideoSettings","video","ideal","ScreenSettings","systemAudio","displaySurface","frameRate","max","questionDiv","getElementById","result","protocol","host","subject","ModalFactory","create","types","ALERT","title","body","modal","show","setSubmitButtonState","thisQuestion","anyRecorded","submitButton","typeInfo","mediaType","audioBitRate","screenBitRate","screenWidth","screenHeight","videoBitRate"],"mappings":"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"}